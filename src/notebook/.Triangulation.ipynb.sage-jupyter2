{"backend_state":"running","kernel":"sagemath","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":363372544},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":2},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython2","version":"2.7.15"}},"trust":true,"type":"settings"}
{"cell_type":"code","collapsed":true,"exec_count":0,"id":"4d647f","input":"","pos":5,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"0648c5","input":"","pos":24,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"06e830","input":"# find derivative\nd1 = diff(series, b1)\nd2 = diff(series, b2)\nd3 = diff(series, b3)\nd = (d1, d2, d3)\n# find the volume lower bound\nvol_min_global = 1/h_max**3\n# divide solution space into grids\nx_max, y_max, z_max = b_max\nx = np.linspace(0, x_max, x_max+1)\ny = np.linspace(0, y_max, y_max+1)\nz = np.linspace(0, z_max, z_max+1)\nxv, yv, zv = np.meshgrid(x, y, z)\nfor i in range(x_max):\n    for j in range(y_max):\n        for k in range(z_max):\n            # find the bounds\n            b1_min = xv[i,j,k]\n            b1_max = b1_min+1\n            b2_min = yv[i,j,k]\n            b2_max = b2_min+1\n            b3_min = zv[i,j,k]\n            b3_max = b3_min+1\n            bounds = [[b1_min, b1_max],[b2_min,b2_max],[b3_min,b3_max]]\n            # try solve\n            vol, sol = NSolve(series, d, vol_min_global, bounds)\n            if type(sol) == int or type(vol) == int:\n                # sol = -1 and vol = -1\n                print ('range ', b1_min,b2_min,b3_min,' does not work')\n                continue\n            if type(sol) == np.ndarray:\n                # edge case\n                sol = sol.tolist()\n            if sol[0] > sol_max or sol[1] > sol_max or sol[2] > sol_max:\n                print ('solution out of bounds.')\n                continue\n            if vol_min_global < vol < 1:\n                print ('vol:', vol, '; sol:', sol)\n                return vol, sol\nprint('cannot find solution.')","pos":10,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"5b5c37","input":"","pos":16,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"fe1193","input":"","pos":41,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"46e7d1","input":"import numpy as np\nimport scipy\nimport math\nimport os\n\nprint('Okay')","output":{"0":{"name":"stdout","output_type":"stream","text":"Okay\n"}},"pos":0,"type":"cell"}
{"cell_type":"code","exec_count":101,"id":"83b45d","input":"n = 10\nprint polygons[n].vertices()\npolygons[n].plot()","output":{"0":{"name":"stdout","output_type":"stream","text":"(A vertex at (-6, -4, -1), A vertex at (0, 0, 1), A vertex at (0, 1, 0), A vertex at (1, 0, 0))\n"},"1":{"data":{"iframe":"ac36aaa2177384c95ddb338773fe69e05029d4b5"},"exec_count":101,"output_type":"execute_result"}},"pos":18,"type":"cell"}
{"cell_type":"code","exec_count":104,"id":"e2f963","input":"","pos":17,"type":"cell"}
{"cell_type":"code","exec_count":108,"id":"30300f","input":"verts = [[-4,-4,-3],[-3,-3,-2],[-2,-2,-1],[-1,-1,0],[-1,-1,-1],[0,0,0],[0,0,1],[1,0,0],[0,1,0]]\nprint len(verts)","output":{"0":{"name":"stdout","output_type":"stream","text":"9\n"}},"pos":21,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"13f852","input":"euler_plot = []\nvol_list = []\nfor key, value in vol_dict.iteritems():\n    euler_plot.append(value[0])\n    vol_list.append(value[1])\n\nplt.scatter(euler, np.reciprocal(vol_list))","output":{"0":{"data":{"text/plain":"<matplotlib.collections.PathCollection object at 0x7efeb7882cd0>"},"exec_count":13,"output_type":"execute_result"},"1":{"data":{"image/png":"4912f973656d6a76a303a5e472ed3e58cbdd7fd0"},"exec_count":13,"output_type":"execute_result"}},"pos":27,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"842e0d","input":"pt_list = [[0,0,0],[1,0,0],[0,0,1],[0,1,0],[-1,-1,0],[-2,-2,-1]]\npoly = PointConfiguration(pt_list)","pos":52,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"b6f585","input":"vol_list_2 = generate_vol(10, coeff=2)","output":{"0":{"name":"stdout","output_type":"stream","text":"(1, 0, 0)\n2\nreset starting point:  0.561442491052 0.670298474884 0.566861549284\nsolution:  [ 1.50000371  1.49999568  1.00000015]\nguessed vol:  0.5925925926130731\nDone.\n('vol:', 0.5925925926130731, '; sol:', [1.5000037053951973, 1.4999956761861397, 1.0000001546030413])\n\n(1, 1, 0)\n2\nreset starting point:  0.875803567656 0.816870125328 0.760854701834\nsolution:  [ 1.49999997  1.50000655  1.50000166]\nguessed vol:  0.5925925925985212\nDone.\n('vol:', 0.5925925925985212, '; sol:', [1.4999999694644557, 1.5000065452259592, 1.5000016591065992])\n\n(1, 1, 1)\n2\nreset starting point:  0.842439037926 0.545594059241 0.182707609276\n"},"1":{"name":"stdout","output_type":"stream","text":"solution:  [  2.70274551e+38   3.26092276e+38  -4.89496927e+38]\nguessed vol:  -4.250668110320325e-155\nvolume:  -4.250668110320325e-155  is out of bounds.\nreset starting point:  0.673444297941 0.797017914466 0.712850504108\nsolution:  [  1.03903570e+32   1.04205876e+32  -1.34978634e+32]\nguessed vol:  -5.057963426653359e-129\nvolume:  -5.057963426653359e-129  is out of bounds.\nreset starting point:  0.920111585283 0.0714661951283 0.452020572462\nsolution:  [ 1.4999949   1.49999865  2.49999971]\nguessed vol:  0.5925925925985212\nDone.\n('vol:', 0.5925925925985212, '; sol:', [1.4999948982711409, 1.499998645704348, 2.4999997054924434])\n\n(2, 0, 0)\n4\nreset starting point:  0.267899647648 0.27066179199 0.0462934025384\nsolution:  [ 1.49996138  1.49993949  1.99982817]\nguessed vol:  0.29629630003182683\nDone.\n('vol:', 0.29629630003182683, '; sol:', [1.4999613764081259, 1.4999394882122803, 1.9998281659558736])\n\n(2, 1, 0)\n4\nreset starting point:  0.927820689875 0.108883040965 0.105704288608\n"},"10":{"name":"stdout","output_type":"stream","text":" -0.2098831414074334  is out of bounds.\nreset starting point:  0.26376666948 0.457683236286 0.084899976829\nsolution: "},"11":{"name":"stdout","output_type":"stream","text":" [  2.23947958e+38   3.29523049e+38  -2.28155884e+39]\nguessed vol:  -7.318349654401091e-156\nvolume:  -7.318349654401091e-156  is out of bounds.\nreset starting point:  0.371632177777 0.926394665426 0.130279880612\nsolution: "},"12":{"name":"stdout","output_type":"stream","text":" [  2.04597140e+38   3.97078747e+38  -2.15700656e+39]\nguessed vol:  -6.721320274718443e-156\nvolume:  -6.721320274718443e-156  is out of bounds.\nsolution out of bounds.\nreset starting point:  0.334343474792 0.927262287185 -0.104758893369\nsolution:  [  1.80708005e+38   3.89369555e+38  -2.15938631e+39]\nguessed vol:  -7.532714392866727e-156\nvolume:  -7.532714392866727e-156  is out of bounds.\nreset starting point: "},"13":{"name":"stdout","output_type":"stream","text":" 0.686290341481 0.680301533249 -0.0569865731049\nsolution:  [  2.53963311e+38   2.83069862e+38  -2.08151365e+39]\nguessed vol:  -1.0035263544071874e-155\nvolume:  -1.0035263544071874e-155  is out of bounds.\nreset starting point:  0.0375754399853 0.913692428455 -0.386133166285\n"},"14":{"name":"stdout","output_type":"stream","text":"solution:  [  1.06312434e+37   2.25075349e+38  -1.27967785e+39]\nguessed vol:  -5.1215865641855116e-154\nvolume:  -5.1215865641855116e-154  is out of bounds.\nsolution out of bounds.\nreset starting point:  0.558904061693 0.326677532406 1.03100302976\nsolution:  [ 1.4673172   1.46730848  6.50995043]\nguessed vol:  0.20731663258266053\nDone.\n('vol:', 0.20731663258266053, '; sol:', [1.4673171998665602, 1.4673084775570828, 6.50995042668014])\n\n(3, 3, 3)\n6\nreset starting point:  0.417464746911 0.599298940664 0.542106885152\nsolution: "},"15":{"name":"stdout","output_type":"stream","text":" [  3.26801899e+38   3.73027985e+38  -1.63937248e+39]\nguessed vol:  -8.44254683766742e-156\nvolume:  -8.44254683766742e-156  is out of bounds.\nreset starting point:  0.427108038996 0.264386762024 0.954928445627\nsolution:  [ 1.49999172  1.49999905  7.50000294]\nguessed vol:  0.19753086420496402\nDone.\n('vol:', 0.19753086420496402, '; sol:', [1.4999917180373186, 1.499999053032334, 7.5000029381108915])\n\n(4, 0, 0)\n8\nreset starting point:  0.52911536609 0.233611802841 0.946524294236\nsolution:  [ 1.49998708  1.49999446  4.00001846]\nguessed vol:  0.14814814816145372\nDone.\n('vol:', 0.14814814816145372, '; sol:', [1.4999870760999172, 1.4999944627989066, 4.000018461527954])\n\n(4, 1, 0)\n"},"16":{"name":"stdout","output_type":"stream","text":"8\nreset starting point:  0.0824427607822 0.0386350715047 0.924681044852\nsolution:  [ 1.47152881  1.47153899  4.6029732 ]\nguessed vol:  0.15443680656608194\nDone.\n('vol:', 0.15443680656608194, '; sol:', [1.4715288109660745, 1.4715389896079059, 4.602973199397179])\n\n(4, 1, 1)\n8\nreset starting point:  0.255262731856 0.0546666968403 0.579555671974\nsolution: "},"17":{"name":"stdout","output_type":"stream","text":" [ 1.5000058   1.50000245  5.49999421]\nguessed vol:  0.14814814811688848\nDone.\n('vol:', 0.14814814811688848, '; sol:', [1.5000057954234232, 1.5000024494988633, 5.499994209534222])\n\n(4, 2, 0)\n8\nreset starting point:  0.266662322636 0.599639434218 0.293260147242\nsolution:  [ 0.76393202  5.23606798  0.81528171]\nguessed vol:  -0.06250000000000001\nvolume:  -0.06250000000000001  is out of bounds.\nreset starting point:  0.71679064282 0.296223026097 0.645818897826\nsolution: "},"18":{"name":"stdout","output_type":"stream","text":" [ 1.46430688  1.46413043  5.07097279]\nguessed vol:  0.1563078537583351\nDone.\n('vol:', 0.1563078537583351, '; sol:', [1.4643068808213506, 1.464130433184049, 5.070972793416878])\n\n(4, 2, 1)\n8\nreset starting point:  0.715398633101 0.612734888249 0.25085525735\nsolution:  [ 2.38549818  2.38552817  0.23576487]\nguessed vol:  -0.027415939357638308\n"},"19":{"name":"stdout","output_type":"stream","text":"volume:  -0.027415939357638308  is out of bounds.\nreset starting point:  0.183151509598 0.516950111893 0.0605116812883\nsolution:  [  3.85573579e+38   7.76924560e+38  -3.46623870e+39]\nguessed vol:  -2.5982920837225753e-156\nvolume:  -2.5982920837225753e-156  is out of bounds.\nreset starting point:  0.180340149272 0.133544924836 0.957771998625\nsolution:  [ 1.4715286   1.47153969  6.07451286]\nguessed vol:  0.15443680654425407\nDone.\n('vol:', 0.15443680654425407, '; sol:', [1.4715285955778108, 1.4715396855494471, 6.074512861769247])\n\n(4, 2, 2)\n"},"2":{"name":"stdout","output_type":"stream","text":"solution:  [ 1.46326451  1.46358656  2.53705321]\nguessed vol:  0.31261580996215343\nDone.\n('vol:', 0.31261580996215343, '; sol:', [1.4632645129857855, 1.4635865626153326, 2.5370532133728996])\n\n(2, 1, 1)\n4\nreset starting point:  0.142441539829 0.279339976723 0.669932414269\nsolution:  [ 1.49999553  1.50000087  3.50000267]\nguessed vol:  0.29629629630653653\nDone.\n('vol:', 0.29629629630653653, '; sol:', [1.499995528017344, 1.500000874138801, 3.500002673115841])\n\n(2, 2, 0)\n4\nreset starting point:  0.344708638991 0.706799505441 0.362507672921\nsolution: "},"20":{"name":"stdout","output_type":"stream","text":"8\nreset starting point:  0.531246497476 0.501961444407 0.86575230623\nsolution: "},"21":{"name":"stdout","output_type":"stream","text":" [  2.31242447e+36   3.08267578e+36  -1.56649129e+37]\nguessed vol:  -4.695272854194356e-147\nvolume:  -4.695272854194356e-147  is out of bounds.\nreset starting point:  0.228207706033 0.775487178304 0.626075670238\nsolution: "},"22":{"name":"stdout","output_type":"stream","text":" [  1.38817251e+38   2.29791799e+38  -9.58139798e+38]\nguessed vol:  -2.9162971056422696e-154\nvolume:  -2.9162971056422696e-154  is out of bounds.\nreset starting point:  0.273641730949 0.0818227333142 0.62755427932\nsolution:  [ 1.49999418  1.50002162  7.00010706]\nguessed vol:  0.14814814823603228\nDone.\n('vol:', 0.14814814823603228, '; sol:', [1.4999941825810772, 1.5000216168289262, 7.000107063019781])\n\n(4, 3, 0)\n"},"23":{"name":"stdout","output_type":"stream","text":"8\nreset starting point:  0.42563463742 0.856505331669 0.572594590868\nsolution:  [ 0.71610702  9.6561743   1.10711629]\nguessed vol:  -0.011347286890784538\nvolume:  -0.011347286890784538  is out of bounds.\nreset starting point:  0.886609672378 0.611635028627 0.998421788738\nsolution: "},"24":{"name":"stdout","output_type":"stream","text":" [ 1.47152411  1.47153348  5.51092002]\nguessed vol:  0.15443680655153003\nDone.\n('vol:', 0.15443680655153003, '; sol:', [1.471524107062306, 1.471533477247891, 5.510920024767511])\n\n(4, 3, 1)\n8\nreset starting point:  0.223522506745 0.951686536692 0.895755589008\nsolution: "},"25":{"name":"stdout","output_type":"stream","text":" [ 3.00001185  2.99998879 -2.21113549]\nguessed vol:  -0.004629629629789633\nvolume:  -0.004629629629789633  is out of bounds.\nreset starting point:  0.269968277897 0.273627880295 0.650582234306\nsolution: "},"26":{"name":"stdout","output_type":"stream","text":" [ 1.46438238  1.46411115  6.53477408]\nguessed vol:  0.15630785636932387\nDone.\n('vol:', 0.15630785636932387, '; sol:', [1.4643823774055926, 1.4641111546858516, 6.534774079973266])\n\n(4, 3, 2)\n8\nreset starting point:  0.0168755491973 0.904694579369 0.824692810827\nsolution: "},"27":{"name":"stdout","output_type":"stream","text":" [  6.08197802e+36   2.06360573e+38  -1.15974041e+39]\nguessed vol:  -1.9157034579847002e-153\nvolume:  -1.9157034579847002e-153  is out of bounds.\nreset starting point:  0.321600166621 0.397497100894 0.770608177811\nsolution:  [ 2.38550954  2.38551937  2.62126569]\nguessed vol:  -0.027415939355591945\nvolume:  -0.027415939355591945  is out of bounds.\nreset starting point:  0.326200372502 0.77914119777 0.91665062565\nsolution:  [ 2.38547805  2.38555724  2.62136992]\nguessed vol:  -0.027415939367273268\nvolume:  -0.027415939367273268  is out of bounds.\nreset starting point:  0.0626132697802 0.842322291661 -0.808909037915\nsolution: "},"28":{"name":"stdout","output_type":"stream","text":" [  1.90522317e+37   2.23708034e+38  -1.60327668e+39]\nguessed vol:  -3.127504478049752e-154\nvolume:  -3.127504478049752e-154  is out of bounds.\nreset starting point:  0.739387123044 0.230925875944 -0.592482921036\n"},"29":{"name":"stdout","output_type":"stream","text":"solution:  [  2.39593148e+38   2.44669869e+38  -1.64142193e+39]\nguessed vol:  -4.147096320542973e-155\nvolume:  -4.147096320542973e-155  is out of bounds.\nreset starting point:  0.843042903648 0.525460045521 -0.726722223987\nsolution:  [ 2.38550491  2.38552172  2.62127365]\nguessed vol:  -0.027415939357297248\nvolume:  -0.027415939357297248  is out of bounds.\nreset starting point:  0.360570058654 0.0867757816925 1.6680683693\nsolution:  [ 1.4715001   1.47152727  7.54608033]\nguessed vol:  0.1544368065915478"},"3":{"name":"stdout","output_type":"stream","text":" [  1.00000000e+00   9.92309584e+28   2.00000000e+00]\nguessed vol:  -5.077800484550565e-59\nvolume:  -5.077800484550565e-59  is out of bounds.\nreset starting point:  0.80794360179 0.19284628502 0.18753814739\nsolution:  [ 1.49999736  1.50001193  3.00000715]\nguessed vol:  0.2962962963283644\nDone.\n('vol:', 0.2962962963283644, '; sol:', [1.499997358345462, 1.500011925366168, 3.000007148682908])\n\n(2, 2, 1)\n4\nreset starting point:  0.990936200847 0.26853668606 0.496597053824\nsolution:  [ 1.46383452  1.46434345  4.00076749]\nguessed vol:  0.3126157212536782\nDone.\n('vol:', 0.3126157212536782, '; sol:', [1.4638345210284, 1.4643434499127728, 4.000767493100177])\n\n(2, 2, 2)\n"},"30":{"name":"stdout","output_type":"stream","text":"\nDone.\n('vol:', 0.1544368065915478, '; sol:', [1.4715001011181503, 1.4715272720096277, 7.546080325261617])\n\n(4, 3, 3)\n8\nreset starting point:  0.51061549811 0.393955351516 0.139959902534\n"},"31":{"name":"stdout","output_type":"stream","text":"solution:  [  1.18087426e+38   1.47265187e+38  -8.39166073e+38]\nguessed vol:  -4.1112341383341794e-154\nvolume:  -4.1112341383341794e-154  is out of bounds.\nreset starting point:  0.281568007724 0.791179447762 0.532556157305\n"},"32":{"name":"stdout","output_type":"stream","text":"solution:  [  1.31014047e+38   2.40206043e+38  -1.21684263e+39]\nguessed vol:  -9.207860190251733e-155\nvolume:  -9.207860190251733e-155  is out of bounds.\nreset starting point:  0.764360685718 0.529659043244 0.0246507567493\nsolution:  [  2.28812635e+38   1.05692794e+38  -8.42947593e+38]\nguessed vol:  -9.165352433681063e-154\nvolume:  -9.165352433681063e-154"},"33":{"name":"stdout","output_type":"stream","text":"  is out of bounds.\nsolution out of bounds.\nreset starting point:  0.561631413217 0.382668610962 -0.414981833425\nsolution:  [  6.66540885e+37   3.72103125e+37  -3.26427349e+38]\nguessed vol:  -3.252587231558186e-152\nvolume:  -3.252587231558186e-152  is out of bounds.\nreset starting point:  0.397339859805 0.631152216842 -0.0775410688981\nsolution: "},"34":{"name":"stdout","output_type":"stream","text":" [  1.88319737e+38   2.50457081e+38  -1.46595031e+39]\nguessed vol:  -4.765676685851005e-155\nvolume:  -4.765676685851005e-155  is out of bounds.\nreset starting point:  0.819528627338 0.481842937433 -0.642913654613\nsolution: "},"35":{"name":"stdout","output_type":"stream","text":" [  7.68282400e+37   6.02064557e+37  -4.51133239e+38]\nguessed vol:  -6.818152362714129e-153\nvolume:  -6.818152362714129e-153  is out of bounds.\nsolution out of bounds.\nreset starting point:  0.203861165058 0.830040263871 1.04995510674\nsolution:  [  1.44159517e+38   3.12364307e+38  -1.45730907e+39]\nguessed vol:  -4.2680869264095885e-155\nvolume:  -4.2680869264095885e-155  is out of bounds.\nreset starting point:  0.513082256643 0.0640188392521 1.80082659987\nsolution:  [ 1.50000328  1.49998065  8.49995512]\nguessed vol:  0.14814814817327715\nDone.\n('vol:', 0.14814814817327715, '; sol:', [1.500003281136487, 1.4999806475586395, 8.499955118961276])\n\n(4, 4, 0)\n"},"36":{"name":"stdout","output_type":"stream","text":"8\nreset starting point:  0.355470638284 0.583025710123 0.0868481968257\n"},"37":{"name":"stdout","output_type":"stream","text":"solution:  [  1.00000000e+00   5.10548513e+21   4.00000000e+00]\nguessed vol:  -9.591046087630083e-45\nvolume:  -9.591046087630083e-45  is out of bounds.\nreset starting point:  0.778533993554 0.857734090841 0.93934932175\nsolution:  [ 1.50000003  1.49999186  5.99999179]\nguessed vol:  0.14814814816054422\nDone.\n('vol:', 0.14814814816054422, '; sol:', [1.5000000335109915, 1.499991860719729, 5.9999917899318325])\n\n(4, 4, 1)\n8\nreset starting point:  0.457280944644 0.75390084877 0.415697779383\nsolution:  [ 4.38275447  4.38278427 -7.10459473]\n"},"38":{"name":"stdout","output_type":"stream","text":"guessed vol:  -0.000538229697525594\nvolume:  -0.000538229697525594  is out of bounds.\nreset starting point:  0.295741072961 0.220012084436 0.400412888205\nsolution: "},"39":{"name":"stdout","output_type":"stream","text":" [ 1.4715817   1.47151986  6.98220385]\nguessed vol:  0.1544368067807227\nDone.\n('vol:', 0.1544368067807227, '; sol:', [1.4715817042256298, 1.4715198608405053, 6.982203845821197])\n\n(4, 4, 2)\n8\nreset starting point:  0.240187083198 0.971156551127 0.746541380114\nsolution: "},"4":{"name":"stdout","output_type":"stream","text":"4\nreset starting point:  0.631762940122 0.374142327137 0.771175850471\nsolution:  [ 1.50000878  1.50000186  4.9999984 ]\nguessed vol:  0.2962962962992606\nDone.\n('vol:', 0.2962962962992606, '; sol:', [1.500008777863218, 1.5000018569847402, 4.999998397232198])\n\n(3, 0, 0)\n6\nreset starting point:  0.823657781933 0.911902261973 0.0806972769383\nsolution: "},"40":{"name":"stdout","output_type":"stream","text":" [  2.39826427e+38   7.79613569e+38  -3.27341682e+39]\nguessed vol:  -1.3628888910501446e-156\nvolume:  -1.3628888910501446e-156  is out of bounds.\nreset starting point:  0.624926708206 0.666516555055 0.703148783497\nsolution:  [ 2.99998267  3.00001986  0.78897385]\nguessed vol:  -0.004629629629988585\nvolume:  -0.004629629629988585  is out of bounds.\nreset starting point:  0.235428874909 0.769065946229 0.0433013023002\nsolution:  [  2.33309858e+38   6.26671658e+38  -4.44992524e+39]\nguessed vol:  -1.0894965216149757e-156\nvolume:  -1.0894965216149757e-156  is out of bounds."},"41":{"name":"stdout","output_type":"stream","text":"\nsolution out of bounds.\nreset starting point:  0.025728354158 0.237611076149 -0.397154225481\nsolution:  [  1.12638696e+37   9.55912800e+37  -9.90367180e+38]\nguessed vol:  -2.853024493168866e-153\nvolume:  -2.853024493168866e-153  is out of bounds.\nreset starting point:  0.81151077348 0.508559983125 -0.367749472136\nsolution:  [ 3.00003952  2.99996128  0.78874198]\nguessed vol:  -0.004629629630684917\nvolume:  -0.004629629630684917  is out of bounds.\nreset starting point:  0.0617836740667 "},"42":{"name":"stdout","output_type":"stream","text":"0.234316517515 -0.888192349981\nsolution:  [  1.03092506e+38   3.77609522e+38  -4.85625033e+39]\nguessed vol:  -3.6112332588340145e-156\nvolume:  -3.6112332588340145e-156"},"43":{"more_output":true},"5":{"name":"stdout","output_type":"stream","text":" [ 1.49999364  1.50000482  3.00001025]\nguessed vol:  0.1975308642058735\nDone.\n('vol:', 0.1975308642058735, '; sol:', [1.499993640186956, 1.5000048206834258, 3.000010249548492])\n\n(3, 1, 0)\n6\nreset starting point:  0.597847516112 0.706386081458 0.195463064933\nsolution:  [ 1.46729579  1.46731338  3.57536969]\nguessed vol:  0.20731663259721245\nDone.\n('vol:', 0.20731663259721245, '; sol:', [1.467295793947168, 1.4673133799730382, 3.575369688626381])\n\n(3, 1, 1)\n6\nreset starting point:  0.158720794802 0.327278134316 0.47171068725\nsolution: "},"6":{"name":"stdout","output_type":"stream","text":" [ 1.49999831  1.50000458  4.50000241]\nguessed vol:  0.197530864208602\nDone.\n('vol:', 0.197530864208602, '; sol:', [1.4999983117972941, 1.5000045758347926, 4.500002406592519])\n\n(3, 2, 0)\n6\nreset starting point:  0.455794308397 0.28264478417 0.511744876045\nsolution:  [ 1.46731551  1.46730381  4.02271155]\nguessed vol:  0.20731663259175548\nDone.\n('vol:', 0.20731663259175548, '; sol:', [1.4673155110699998, 1.4673038086696255, 4.022711553350147])\n\n(3, 2, 1)\n6\nreset starting point:  0.995350061033 0.338586641968 0.047847291304\nsolution: "},"7":{"name":"stdout","output_type":"stream","text":" [ 4.16685535  0.79364395 -2.14521327]\nguessed vol:  -0.2098831414074333\nvolume:  -0.2098831414074333  is out of bounds.\nreset starting point:  0.630216282063 0.543602150185 0.81294583775\nsolution:  [ 1.4673092   1.46731323  5.0426605 ]\nguessed vol:  0.20731663256810862\nDone.\n('vol:', 0.20731663256810862, '; sol:', [1.4673091950959847, 1.4673132259825652, 5.0426605028287455])\n\n(3, 2, 2)\n6\nreset starting point:  0.741406274606 0.287290799446 0.770881156028\nsolution:  [ 1.49999747  1.50000538  6.00000862]\nguessed vol:  0.19753086419768806\nDone.\n('vol:', 0.19753086419768806, '; sol:', [1.4999974685747448, 1.5000053798861916, 6.000008623299139])\n\n(3, 3, 0)\n"},"8":{"name":"stdout","output_type":"stream","text":"6\nreset starting point:  0.838560061302 0.509077927438 0.510372277635\nsolution:  [ 1.50001416  1.49999192  4.49994221]\nguessed vol:  0.19753086424680077\nDone.\n('vol:', 0.19753086424680077, '; sol:', [1.5000141588062215, 1.4999919248782994, 4.499942213397944])\n\n(3, 3, 1)\n6\nreset starting point:  0.425729484149 0.721835258279 0.690973417534\nsolution:  [ 3.74866519  3.74863225 -2.75591828]\nguessed vol:  -0.001645077201260392\n"},"9":{"name":"stdout","output_type":"stream","text":"volume:  -0.001645077201260392  is out of bounds.\nreset starting point:  0.383090059541 0.859510914529 0.53470778585\nsolution:  [ 3.74865654  3.74863885 -2.75589775]\nguessed vol:  -0.001645077201260392\nvolume:  -0.001645077201260392  is out of bounds.\nreset starting point:  0.796966649053 0.469353706205 0.897412235862\nsolution:  [ 1.46732568  1.4673027   5.48998265]\nguessed vol:  0.20731663261449285\nDone.\n('vol:', 0.20731663261449285, '; sol:', [1.4673256766191822, 1.46730269673159, 5.4899826521035])\n\n(3, 3, 2)\n6\nreset starting point:  0.145445067399 0.474724428782 0.970066564194\nsolution:  [ 0.79364394  4.16685535  8.76806488]\nguessed vol:  -0.2098831414074334\nvolume: "}},"pos":30,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"3d8ed7","input":"vol_max = 0\nvol_min = 1\nfor i in range(len(euler)):\n    if euler[i] == 18:\n        vol = vol_list[i]\n        if vol < 1/20.0 or vol > 1/10.0:\n            continue\n        if vol > vol_max:\n            vol_max = vol\n        elif vol < vol_min:\n            vol_min = vol","pos":34,"type":"cell"}
{"cell_type":"code","exec_count":172,"id":"76b849","input":"'''\nInput: given a set of bounds [[x_min, x_max],[y_min, y_max],[z_min, z_max]]\n\nDo: divide the bounds into cubes, [[x_min, x_max],[y_min, y_max],[z_min, z_max]], and iterate over each cube\n\nExample:\n[[-1,2],[-3,2],[-1,1]]\n\n'''\nbounds = [[-1,2],[-3,2],[-1,1]]\nx_min, x_max = bounds[0]\ny_min, y_max = bounds[1]\nz_min, z_max = bounds[2]\nx = np.linspace(x_min, x_max-1, x_max-x_min)\ny = np.linspace(y_min, y_max-1, y_max-y_min)\nz = np.linspace(z_min, z_max-1, z_max-z_min)\nxv, yv, zv = np.meshgrid(x, y, z, indexing='ij')","pos":7,"type":"cell"}
{"cell_type":"code","exec_count":181,"id":"0b50be","input":"mesh_transform3D(xv,yv,zv)","output":{"0":{"name":"stdout","output_type":"stream","text":"0\n1\n2\n"},"1":{"data":{"text/plain":"(array([[[ 0.,  0.],\n         [ 0.,  0.],\n         [ 0.,  0.],\n         [ 0.,  0.],\n         [ 0.,  0.]],\n \n        [[ 1.,  1.],\n         [ 1.,  1.],\n         [ 1.,  1.],\n         [ 1.,  1.],\n         [ 1.,  1.]],\n \n        [[ 1.,  1.],\n         [ 1.,  1.],\n         [ 1.,  1.],\n         [ 1.,  1.],\n         [ 1.,  1.]]]), array([[[ 0.,  0.],\n         [-3., -3.],\n         [ 1.,  1.],\n         [ 1.,  1.],\n         [-2., -2.]],\n \n        [[ 0.,  0.],\n         [-3., -3.],\n         [ 1.,  1.],\n         [ 1.,  1.],\n         [-2., -2.]],\n \n        [[ 0.,  0.],\n         [-3., -3.],\n         [ 1.,  1.],\n         [ 1.,  1.],\n         [-2., -2.]]]), array([[[ 0., -1.],\n         [ 0., -1.],\n         [ 0., -1.],\n         [ 0., -1.],\n         [ 0., -1.]],\n \n        [[ 0., -1.],\n         [ 0., -1.],\n         [ 0., -1.],\n         [ 0., -1.],\n         [ 0., -1.]],\n \n        [[ 0., -1.],\n         [ 0., -1.],\n         [ 0., -1.],\n         [ 0., -1.],\n         [ 0., -1.]]]))"},"exec_count":181,"output_type":"execute_result"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"8bbf9b","input":"poly.triangulate()","output":{"0":{"data":{"text/plain":"(<0,1,2,3>, <0,1,2,4>, <0,1,3,5>, <0,1,4,5>, <0,2,3,4>, <0,3,4,5>)"},"exec_count":19,"output_type":"execute_result"}},"pos":53,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"74b3b1","input":"def exist(pts, latt):\n    latt = np.array(latt)\n    for i in range(pts.shape[0]):\n        if pts[i][0]==latt[0]:\n            if pts[i][1]==latt[1]:\n                if pts[i][2]==latt[2]:\n                    return 1\n    return 0\n\ndef contain(poly, latt):\n    if poly.contains(latt) == 1:\n        return 1\n    else:\n        poly_latt = Polyhedron(vertices = [tuple(latt)])\n        vert = next(poly_latt.vertex_generator())\n        face_eq = poly.Hrepresentation()\n        for eq in face_eq:\n            if eq.contains(vert) != 1:\n                return 0\n        return 1\n    return 0\n\ndef check_latt(p):\n    pts = np.array(p)\n    pts_max = int(max(np.amax(pts, axis=0)))+1\n    pts_min = int(min(np.amin(pts, axis=0)))-1\n    print ('pts_max and pts_min: ', pts_max, pts_min)\n    poly = Polyhedron(p)\n    pts_new = pts\n    for i in range(pts_min, pts_max):\n        for j in range(pts_min, pts_max):\n            for k in range(pts_min, pts_max):\n                latt = [i,j,k]\n                if exist(pts, latt) == 1:\n                    continue\n                if contain(poly, latt) == 1:\n                    pts_new = np.append(pts_new, np.array(latt).reshape((1,3)), axis = 0)  \n    pts_new = pts_new.tolist()\n    return pts_new\n\n\n\ndef four_cross(v1, v2, v3, v4):\n    #Compute cross product of three 4-vectors\n    #print (\"input vectors: \", v1, v2, v3, v4)\n    v = np.zeros((4,))\n    counter = 0\n    \n    for i in range(4):\n        mat = [v1[np.arange(len(v1))!=i].tolist(), v2[np.arange(len(v2))!=i].tolist(), v3[np.arange(len(v3))!=i].tolist()]\n        mat = matrix(ZZ, mat)\n        #print ('matrix: ')\n        #print (mat)\n        if counter == 1:\n            v[i] = -1*mat.det()\n            counter = 0\n            #print ('neg: ', v[i])\n            continue\n        elif counter == 0:\n            v[i] = mat.det()\n            counter = 1\n            #print ('pos: ', v[i])\n    #print v\n    mat = matrix(RR, [v1.tolist(), v2.tolist(), v3.tolist(), v4.tolist()])\n    \n    if mat.det() < 0:\n        #print ('original: ', v)\n        v = -1*v\n        #print('changed: ', v)\n    #print ('vector: ', v)\n    return v\n\ndef Hilb(triang_list):\n    triang = []\n    # Add 1 at the end of all verticies\n    for tetra in triang_list:\n        tetra_new = []\n        for vert in tetra:\n            vert_new = np.append(np.array(vert),1).tolist()\n            tetra_new.append(vert_new)\n        triang.append(tetra_new)\n    \n    triang = np.array(triang)\n    # Add 1 to the end of all vectors\n    power = np.zeros(shape = triang.shape)\n    Hilb = 0\n    t = var('t')\n    t1 = var('t1')\n    t2 = var('t2')\n    t3 = var('t3')\n    t4 = var('t4')\n    for tri in range(triang.shape[0]):\n        hilb = 1\n        t_prod = 1\n        for i in range(4):\n            #Multiplying by -1 is optional\n#             print 'triang:', triang[tri][i], triang[tri][np.remainder(i+1, 4)], triang[tri][np.remainder(i+2, 4)], triang[tri][np.remainder(i+3, 4)]\n            power[tri][i] = -1*four_cross(triang[tri][i], triang[tri][np.remainder(i+1, 4)], triang[tri][np.remainder(i+2, 4)], triang[tri][np.remainder(i+3, 4)])\n            t_prod = t1^(int(power[tri][i][0]))*t2^(int(power[tri][i][1]))*t3^(int(power[tri][i][2]))*t4^int((power[tri][i][3]))\n#             print 'power:', power[tri][i]\n#             print 't_prod:', t_prod\n            hilb *= (1-t_prod)^(-1)\n        #print ('Hilbert: ', hilb)\n        Hilb += hilb\n#     print ('Hilb: ', Hilb())\n#     print (Hilb(t1=t, t2=t, t3=t).series(t4, 3))\n    #print (\"p-q web: \", power )\n    \n    \n    m = var('m')\n    b1 = var('b1')\n    b2 = var('b2')\n    b3 = var('b3')\n    b4 = var('b4')\n    Hilb *= m^4\n    \n    #print ('Hilb: ', str(Hilb(t1 = (m*b1).exp(), t2 = (m*b2).exp(), t3 = (m*b3).exp(), t4 = (m*4).exp())).replace('e', 'E'))\n    Series = Hilb(t1 = (m*b1).exp(), t2 = (m*b2).exp(), t3 = (m*b3).exp(), t4 = (m*4).exp()).series(m==0, 1)\n    \n    Series = Series.truncate()\n    \n    return Series, triang, power\n\ndef idx_to_pts(triang, pts):\n    # Input a list of lists of indicies\n    # Output a list of lists of points\n    triang_new = []\n    for i in range(len(triang)):\n        triang_new.append([pts[j] for j in triang[i]])\n    return triang_new\n\nprint('Okay')","output":{"0":{"name":"stdout","output_type":"stream","text":"Okay\n"}},"pos":2,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"e17e1b","input":"PointConfiguration.set_engine('topcom')","pos":1,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"1c66cb","input":"# triang_idx = [[0,1,2,3],[0,1,2,4],[0,1,4,5],[0,3,4,5],[0,2,3,4],[0,1,3,5]]\ntriang_idx = poly.triangulate()\ntriang = [[ pt_list[idx] for idx in idx_list] for idx_list in triang_idx]\nprint triang","output":{"0":{"name":"stdout","output_type":"stream","text":"[[[0, 0, 0], [1, 0, 0], [0, 0, 1], [0, 1, 0]], [[0, 0, 0], [1, 0, 0], [0, 0, 1], [-1, -1, 0]], [[0, 0, 0], [1, 0, 0], [0, 1, 0], [-2, -2, -1]], [[0, 0, 0], [1, 0, 0], [-1, -1, 0], [-2, -2, -1]], [[0, 0, 0], [0, 0, 1], [0, 1, 0], [-1, -1, 0]], [[0, 0, 0], [0, 1, 0], [-1, -1, 0], [-2, -2, -1]]]\n"}},"pos":54,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"ce4c30","input":"for i in range(len(euler)):\n    if euler[i] == 2:\n        vol = vol_list[i]\n        print 1/vol","output":{"0":{"name":"stdout","output_type":"stream","text":"1.68749999998\n1.6874999999\n1.68749999998\n"}},"pos":36,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"06fdde","input":"series, triang, power = Hilb(triang)\nprint(series)\nsolver(series, (3,3,3), 3)","output":{"0":{"name":"stdout","output_type":"stream","text":"-1/((2*b1 - b2 - b3 + 4)*(b1 - b2)*(b1 - 2*b3)*b3) + 1/((2*b1 - b2 - b3 + 4)*(b1 - b2)*b1*b3) - 1/((b1 - b2)*(b1 - 2*b2 + b3 - 4)*(b2 - 2*b3)*b3) + 1/((b1 + b2 - 5*b3 - 4)*(b1 - 2*b3)*(b2 - 2*b3)*b3) + 1/((b1 - b2)*(b1 - 2*b2 + b3 - 4)*b2*b3) - 1/((b1 + b2 + b3 - 4)*b1*b2*b3)\nreset starting point:  0.842802699642 0.314689284734 0.0465811896077\nsolution:  [ -9.99974341e-01  -1.00005477e+00  -1.87806403e-04]\nguessed vol:  0.1666666679084301\nDone.\n('vol:', 0.1666666679084301, '; sol:', [-0.9999743411274298, -1.0000547719126662, -0.0001878064032707298])\n"},"1":{"name":"stderr","output_type":"stream","text":"/ext/sage/sage-8.4_1804/local/lib/python2.7/site-packages/scipy/optimize/minpack.py:163: RuntimeWarning: The iteration is not making good progress, as measured by the \n  improvement from the last ten iterations.\n  warnings.warn(msg, RuntimeWarning)\n"},"2":{"data":{"text/plain":"(0.1666666679084301,\n [-0.9999743411274298, -1.0000547719126662, -0.0001878064032707298])"},"exec_count":21,"output_type":"execute_result"}},"pos":55,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"57125d","input":"y0 = 1.68745\ny1 = 1/vol_max\nx0 = 2\nx1 = 18\nm = (y1 - y0)/(x1 - x0)\nk = y0 - m*x0\nprint m\nprint k","output":{"0":{"name":"stdout","output_type":"stream","text":"0.794721386010046\n0.0980072279799074\n"}},"pos":37,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"5dd376","input":"h1 = 2\nh2 = 1\nh3 = 0\nprint(h1,h2,h3)\nprism, series, triang, power = lift_prism(h1, h2, h3)\ntriang = np.squeeze(np.array(triang))\npower = np.squeeze(np.array(power))\nprint(series)\nprint(prism)\nprint(triang)\nprint(power)","output":{"0":{"name":"stdout","output_type":"stream","text":"(2, 1, 0)\n(0, 1, 2)\n1\n1/((2*b1 + b2 + b3 - 12)*(2*b1 + b3 - 8)*(b1 - b2)*b1) + 1/((b1 + b3 - 4)*b1*(b2 + b3 - 4)*(b2 - 4)) - 1/((3*b1 + b3 - 12)*(2*b1 + b3 - 8)*(b1 - b2)*b2) + 1/((b1 - b2)*b1*(b2 + b3 - 4)*b3) - 1/((b1 - b2)*(b1 + b3 - 4)*b2*b3)\n[[[1, 0, 0], [1, 1, 0], [0, 0, 0], [0, 0, 1]], [[0, 0, 0], [1, 1, 0], [0, 1, 0], [0, 0, 1]], [[1, 1, 0], [0, 1, 0], [0, 1, 1], [0, 0, 1]], [[1, 0, 0], [1, 1, 0], [0, 0, 2], [0, 0, 3]], [[1, 1, 0], [0, 1, 2], [0, 0, 2], [0, 0, 3]]]\n[[[1 0 0 1]\n  [1 1 0 1]\n  [0 0 0 1]\n  [0 0 1 1]]\n\n [[0 0 0 1]\n  [1 1 0 1]\n  [0 1 0 1]\n  [0 0 1 1]]\n\n [[1 1 0 1]\n  [0 1 0 1]\n  [0 1 1 1]\n  [0 0 1 1]]\n\n [[1 0 0 1]\n  [1 1 0 1]\n  [0 0 2 1]\n  [0 0 3 1]]\n\n [[1 1 0 1]\n  [0 1 2 1]\n  [0 0 2 1]\n  [0 0 3 1]]]\n[[[ 0.  0.  1.  0.]\n  [ 1. -1. -0. -0.]\n  [ 0.  1.  0.  0.]\n  [-1. -0. -1.  1.]]\n\n [[ 0.  0.  1.  0.]\n  [-0. -1. -1.  1.]\n  [ 1.  0.  0.  0.]\n  [-1.  1. -0. -0.]]\n\n [[-0. -1. -0.  1.]\n  [ 1.  0.  0.  0.]\n  [-1. -0. -1.  1.]\n  [ 0.  1.  1. -1.]]\n\n [[ 2.  0.  1. -2.]\n  [ 1. -1. -0. -0.]\n  [ 0.  1.  0.  0.]\n  [-3. -0. -1.  3.]]\n\n [[ 2.  0.  1. -2.]\n  [ 1. -0. -0. -0.]\n  [-1.  1.  0.  0.]\n  [-2. -1. -1.  3.]]]\n"}},"pos":56,"type":"cell"}
{"cell_type":"code","exec_count":27,"id":"4ba846","input":"p = polygons[2]\nverts = p.vertices()\nh_max = max([max(abs(p) for p in pts) for pts in verts])\nh_max += 1\ninner_pts = []\nfor i in range(-h_max, h_max):\n    for j in range(-h_max, eh_max):\n        for k in range(-h_max, h_max):\n            if p.contains([i,j,k]):\n                inner_pts.append([i,j,k])\nprint inner_pts","output":{"0":{"name":"stdout","output_type":"stream","text":"[[-2, -2, -1], [-1, -1, 0], [0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0]]\n"}},"pos":49,"type":"cell"}
{"cell_type":"code","exec_count":317,"id":"9f442a","input":"import itertools\n\n\n\ndef merge_lists(list1, list2):\n    return [x for x in itertools.chain.from_iterable(itertools.izip_longest(list1,list2)) if x]\n\ndef mesh_transform(x_neg, x_pos):\n    x_neg = x_neg[::-1]\n    return [0] + merge_lists(x_neg, x_pos)\n#     xv_new = [None]*(len(x_neg) + len(x_pos))\n#     print(len(xv_new[::2]))\n#     print(len(xv_new[1::2]))\n#     xv_new[::2] = x_pos\n#     xv_new[1::2] = x_neg\n#     xv_new = [0] + xv_new\n#     return xv_new\n\ndef mesh_transform3D(xv,yv,zv):\n    i_mid = -int(xv[0,0,0])\n    j_mid = -int(yv[0,0,0])\n    k_mid = -int(zv[0,0,0])\n    if i_mid < xv.shape[0]:\n        x_neg = xv[:i_mid,0,0].tolist()\n        x_pos = xv[i_mid+1:,0,0].tolist()\n        xv_new = mesh_transform(x_neg, x_pos)\n        for i in range(xv.shape[0]):\n            print i\n            xv[i,:,:] = xv_new[i]\n    if j_mid < yv.shape[1]:\n        y_neg = yv[0,:j_mid,0].tolist()\n        y_pos = yv[0,j_mid+1:,0].tolist()\n        yv_new = mesh_transform(y_neg, y_pos)\n        for j in range(yv.shape[1]):\n            yv[:,j,:] = yv_new[j]\n    if k_mid < zv.shape[2]:\n        z_neg = zv[0,0,:i_mid].tolist()\n        z_pos = zv[0,0,i_mid+1:].tolist()\n        zv_new = mesh_transform(z_neg, z_pos)\n        for k in range(zv.shape[2]):\n            zv[:,:,k] = zv_new[k]\n    return xv, yv, zv","pos":8,"type":"cell"}
{"cell_type":"code","exec_count":32,"id":"fa6473","input":"data_file = open('lift_1_40.txt', 'r')\ndata_x = []\ndata_y = []\nfor line in data_file:\n  data = eval(line)\n  if data[1] > 0:\n    data_x.append(data[0])\n    data_y.append(1/data[1])\n    \nprint ('Number of data: ', len(data_x))","output":{"0":{"ename":"IOError","evalue":"[Errno 2] No such file or directory: 'lift_1_40.txt'","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIOError\u001b[0m                                   Traceback (most recent call last)","\u001b[0;32m<ipython-input-32-c3f883d7868d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdata_file\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'lift_1_40.txt'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'r'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mdata_x\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mdata_y\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mline\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mdata_file\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m   \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0meval\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mline\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mIOError\u001b[0m: [Errno 2] No such file or directory: 'lift_1_40.txt'"]}},"pos":57,"type":"cell"}
{"cell_type":"code","exec_count":335,"id":"60e1e4","input":"print series\nprint series_2\nprint triang\nprint triang_2\nprint vol, sol\nprint vol_2, sol_2","output":{"0":{"name":"stdout","output_type":"stream","text":"1/((2*b1 - b2 + b3 - 8)*(2*b1 + b3 - 8)*(b1 - b2 + b3 - 4)*(b1 + b3 - 8)) + 1/((b1 + b2 + b3 - 12)*(b1 - b2)*(b1 + b3 - 8)*b1) + 1/((b1 - b2 + b3 - 4)*(b1 - 2*b2 + b3)*(2*b2 - b3)*(b2 - b3)) - 1/((3*b1 - b2 + b3 - 12)*(2*b1 - b2 + b3 - 8)*(b1 - b2)*b2) - 1/((2*b1 + b3 - 8)*(b1 - b2 + b3 - 4)*b1*b2) + 1/((b1 - b2 + b3 - 4)*b1*(2*b2 - b3)*b2)\n1/((b1 - b2 + b3 - 4)*(b1 - b2)*(b1 - 2*b2 + b3)*b1) + 1/((b1 + b2 + b3 - 12)*(b1 - b2)*(b1 + b3 - 8)*b1) + 1/((b1 - b2 + b3 - 4)*(b1 - b2)*(b1 + b3 - 8)*b1) - 1/((3*b1 - b2 + b3 - 12)*(2*b1 - b2 + b3 - 8)*(b1 - b2)*b2) - 1/((2*b1 - b2 + b3 - 8)*(b1 - b2 + b3 - 4)*(b1 - b2)*b2) + 1/((b1 - b2 + b3 - 4)*(b1 - b2)*(b2 - b3)*b2)\n[[[0 0 0 1]\n  [0 0 1 1]\n  [0 1 2 1]\n  [1 0 0 1]]\n\n [[0 0 0 1]\n  [0 1 2 1]\n  [1 0 0 1]\n  [1 1 1 1]]\n\n [[0 0 1 1]\n  [0 0 2 1]\n  [0 1 2 1]\n  [1 0 0 1]]\n\n [[0 0 2 1]\n  [0 0 3 1]\n  [0 1 2 1]\n  [1 1 1 1]]\n\n [[0 0 2 1]\n  [0 0 3 1]\n  [1 0 0 1]\n  [1 1 1 1]]\n\n [[0 0 2 1]\n  [0 1 2 1]\n  [1 0 0 1]\n  [1 1 1 1]]]\n[array([[[1, 0, 0, 1],\n        [0, 0, 0, 1],\n        [0, 0, 1, 1],\n        [1, 1, 1, 1]]]), array([[[0, 1, 2, 1],\n        [0, 0, 0, 1],\n        [0, 0, 1, 1],\n        [1, 1, 1, 1]]]), array([[[1, 0, 0, 1],\n        [0, 0, 1, 1],\n        [0, 0, 2, 1],\n        [1, 1, 1, 1]]]), array([[[0, 1, 2, 1],\n        [0, 0, 1, 1],\n        [0, 0, 2, 1],\n        [1, 1, 1, 1]]]), array([[[1, 0, 0, 1],\n        [0, 0, 2, 1],\n        [0, 0, 3, 1],\n        [1, 1, 1, 1]]]), array([[[0, 1, 2, 1],\n        [0, 0, 2, 1],\n        [0, 0, 3, 1],\n        [1, 1, 1, 1]]])]\n0.20731663259357447 [1.4673208159008067, 1.4673018071686317, 5.0426361832727125]\n0.0198656043153278 [2.552750305256077, 2.5527635457752935, 0.2922616868025497]\n"}},"pos":22,"type":"cell"}
{"cell_type":"code","exec_count":342,"id":"d5b391","input":"print series\nprint series_2\nprint triang\nprint triang_2\nprint vol, sol\nprint vol_2, sol_2","output":{"0":{"name":"stdout","output_type":"stream","text":"1/((b1 + b2 + b3 - 12)*(b1 - b2)*(b1 + b3 - 8)*b1) + 1/4/((b1 - b2)*(b1 - 2*b2 + b3)*(b1 + b3 - 8)*b1) - 1/((3*b1 - b2 + b3 - 12)*(2*b1 - b2 + b3 - 8)*(b1 - b2)*b2) + 1/4/((2*b1 - b2 + b3 - 8)*(b1 - b2)*(b2 - b3)*b2)\n1/((b1 - b2 + b3 - 4)*(b1 - b2)*(b1 - 2*b2 + b3)*b1) + 1/((b1 + b2 + b3 - 12)*(b1 - b2)*(b1 + b3 - 8)*b1) + 1/((b1 - b2 + b3 - 4)*(b1 - b2)*(b1 + b3 - 8)*b1) - 1/((3*b1 - b2 + b3 - 12)*(2*b1 - b2 + b3 - 8)*(b1 - b2)*b2) - 1/((2*b1 - b2 + b3 - 8)*(b1 - b2 + b3 - 4)*(b1 - b2)*b2) + 1/((b1 - b2 + b3 - 4)*(b1 - b2)*(b2 - b3)*b2)\n[[[0 0 0 1]\n  [0 0 2 1]\n  [0 1 2 1]\n  [1 1 1 1]]\n\n [[0 0 0 1]\n  [0 0 2 1]\n  [1 0 0 1]\n  [1 1 1 1]]\n\n [[0 0 2 1]\n  [0 0 3 1]\n  [0 1 2 1]\n  [1 1 1 1]]\n\n [[0 0 2 1]\n  [0 0 3 1]\n  [1 0 0 1]\n  [1 1 1 1]]]\n[array([[[1, 0, 0, 1],\n        [0, 0, 0, 1],\n        [0, 0, 1, 1],\n        [1, 1, 1, 1]]]), array([[[0, 1, 2, 1],\n        [0, 0, 0, 1],\n        [0, 0, 1, 1],\n        [1, 1, 1, 1]]]), array([[[1, 0, 0, 1],\n        [0, 0, 1, 1],\n        [0, 0, 2, 1],\n        [1, 1, 1, 1]]]), array([[[0, 1, 2, 1],\n        [0, 0, 1, 1],\n        [0, 0, 2, 1],\n        [1, 1, 1, 1]]]), array([[[1, 0, 0, 1],\n        [0, 0, 2, 1],\n        [0, 0, 3, 1],\n        [1, 1, 1, 1]]]), array([[[0, 1, 2, 1],\n        [0, 0, 2, 1],\n        [0, 0, 3, 1],\n        [1, 1, 1, 1]]])]\n0.06085660879267321 [3.45225554131971, 0.8719838160923734, -1.3275301636827697]\n0.019865604315555174 [2.5527613470972526, 2.5527507025485012, 0.292236669235081]\n"}},"pos":23,"type":"cell"}
{"cell_type":"code","exec_count":349,"id":"cf84a4","input":"h1,h2,h3 = [3,2,1]\nverts = [[1,0,0],[0,0,0],[0,0,h1],[0,1,h2],[1,1,h3]]\np = Polyhedron(vertices = verts)\nseries, triang, power, vol, sol = poly_vol(p)\nprint 'vol: ', vol\nprint 'sol: ', sol\nprint '==='\ncoeff = 2\nprism_2, series_2, triang_2, power_2 = lift_prism(h1,h2,h3)\nvol_2, sol_2 = solver(series_2, h1*coeff)\nprint 'vol: ', vol_2\nprint 'sol: ', sol_2","output":{"0":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 1, 2], [1, 0, 0], [1, 1, 1]]\n"},"1":{"name":"stdout","output_type":"stream","text":"4\n4\nreset starting point:  0.277416432611 0.929510175252 0.811751256906\nsolution: "},"2":{"name":"stdout","output_type":"stream","text":" [ 2.55275417  2.55276017  0.29225475]\nguessed vol:  -0.01986560431464568\nDone.\n('vol:', 0.01986560431464568, '; sol:', [2.552754170275812, 2.552760165651463, 0.29225474667807166])\nvol:  0.01986560431464568\nsol:  [2.552754170275812, 2.552760165651463, 0.29225474667807166]\n===\n6\nreset starting point:  0.126900727919 0.130746933832 0.438478859399\nsolution: "},"3":{"name":"stdout","output_type":"stream","text":" [ 1.46731679  1.46730285  5.0426432 ]\nguessed vol:  0.20731663260085043\nDone.\n('vol:', 0.20731663260085043, '; sol:', [1.4673167938785052, 1.4673028454442048, 5.042643199718594])\nvol:  0.20731663260085043\nsol:  [1.4673167938785052, 1.4673028454442048, 5.042643199718594]\n"}},"pos":25,"type":"cell"}
{"cell_type":"code","exec_count":35,"id":"515f88","input":"def eq1(x):\n    return 0.85*x\ndef eq2(x):\n    return 0.795*x\n\nfor i in range(len(vol_list)):\n    vol = 1/vol_list[i]\n    x = euler[i]\n    if vol > eq1(x) or vol < eq2(x):\n        print x, vol, eq1(x), eq2(x)","output":{"0":{"name":"stdout","output_type":"stream","text":"12 70.8772585113 10.2000000000000 9.54000000000000\n18 1.63853392401 15.3000000000000 14.3100000000000\n18 3.1458901858 15.3000000000000 14.3100000000000\n18 26.1224691362 15.3000000000000 14.3100000000000\n"}},"pos":35,"type":"cell"}
{"cell_type":"code","exec_count":360,"id":"bd675d","input":"def find_tetra_vol(triang):\n    vol = 0\n    for tetra in triang:\n        p0 = tetra[0]\n        a = np.array(tetra[1]) - np.array(tetra[0])\n        b = np.array(tetra[2]) - np.array(tetra[0])\n        c = np.array(tetra[3]) - np.array(tetra[0])\n        tetra_vol = abs(np.dot(np.cross(a,b),c))/6.0\n        vol += tetra_vol\n    return vol\n\ndef find_vol_bound(triang):\n    vol = find_tetra_vol(triang)\n    h = np.ceil(2*vol)\n    return 1/h","pos":12,"type":"cell"}
{"cell_type":"code","exec_count":362,"id":"781199","input":"h1,h2,h3 = [2,1,1]\nverts = [[1,0,0],[0,0,0],[0,0,h1],[0,1,h2],[1,1,h3]]\np = Polyhedron(vertices = verts)\npoly_vol(p)","output":{"0":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 1], [1, 0, 0], [1, 1, 1]]\n"},"1":{"name":"stdout","output_type":"stream","text":"volume bound:  0.5\n3\n3\nreset starting point:  0.497319369624 0.948967133502 0.178220424513\nsolution: "},"2":{"name":"stdout","output_type":"stream","text":" [  4.87328482e+38   5.70163173e+38  -1.40244644e+39]\nguessed vol:  -8.666184759359001e-156\nvolume:  8.666184759359001e-156  is out of bounds.\nreset starting point:  0.611782595586 0.13450633969 0.333078863201\nsolution:  [ 1.50000216  1.49999351  3.49999568]\nguessed vol:  0.29629629630423066\nDone.\n('vol:', 0.29629629630423066, '; sol:', [1.5000021565534492, 1.499993514440545, 3.499995679973668])\n"},"3":{"data":{"text/plain":"(-1/((2*b1 - b2 + b3 - 8)*(b1 - b2 + b3 - 4)*(b1 - b2)*b2) + 1/((b1 + b3 - 4)*b1*(b2 - b3)*b2) + 1/((b1 - b2)*b1*(b2 + b3 - 8)*(b3 - 4)) - 1/((b1 - b2 + b3 - 4)*(b1 + b3 - 4)*(b2 - b3)*(b3 - 4)),\n array([[[0, 0, 0, 1],\n         [0, 0, 1, 1],\n         [0, 1, 1, 1],\n         [1, 0, 0, 1]],\n \n        [[0, 0, 1, 1],\n         [0, 0, 2, 1],\n         [0, 1, 1, 1],\n         [1, 1, 1, 1]],\n \n        [[0, 0, 1, 1],\n         [0, 0, 2, 1],\n         [1, 0, 0, 1],\n         [1, 1, 1, 1]],\n \n        [[0, 0, 1, 1],\n         [0, 1, 1, 1],\n         [1, 0, 0, 1],\n         [1, 1, 1, 1]]]),\n array([[[ 1., -0., -0., -0.],\n         [-1.,  0., -1.,  1.],\n         [-0., -1.,  1., -0.],\n         [ 0.,  1.,  0.,  0.]],\n \n        [[ 1., -0., -0., -0.],\n         [ 0., -1., -1.,  2.],\n         [-0., -0.,  1., -1.],\n         [-1.,  1.,  0.,  0.]],\n \n        [[ 0.,  1.,  0.,  0.],\n         [-2.,  1., -1.,  2.],\n         [ 1., -1.,  1., -1.],\n         [ 1., -1., -0., -0.]],\n \n        [[ 1., -0.,  1., -1.],\n         [ 0., -1.,  1.,  0.],\n         [-1.,  1., -1.,  1.],\n         [ 0.,  0., -1.,  1.]]]),\n 0.29629629630423066,\n [1.5000021565534492, 1.499993514440545, 3.499995679973668])"},"exec_count":362,"output_type":"execute_result"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":364,"id":"34c137","input":"h1 = 2\n# verts = [[1,0,0],[0,0,0],[0,0,h1],[0,1,0]]\nverts = [[1,0,0],[0,0,0],[0,1,0],[1,1,0],[1,0,h1],[0,0,h1],[0,1,h1],[1,1,h1]]\np = Polyhedron(vertices = verts)\nseries, triang, power, vol, sol = poly_vol(p)","output":{"0":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0, 2], [1, 1, 0], [1, 1, 1], [1, 1, 2]]\n"},"1":{"name":"stdout","output_type":"stream","text":"volume bound:  0.25\n3\n3\nreset starting point:  0.108119354575 0.952002224784 0.277264938923\nsolution: "},"2":{"name":"stdout","output_type":"stream","text":" [ 1.99958846  2.0000015   3.99971156]\nguessed vol:  0.12500000617907356\nDone.\n('vol:', 0.12500000617907356, '; sol:', [1.999588460734248, 2.000001503459558, 3.999711560883024])\n"}},"pos":48,"type":"cell"}
{"cell_type":"code","exec_count":375,"id":"4e5f5a","input":"def cube_stack(h1):\n    # Sample triangulation of a 1x1x1 cube:\n    triang_cube_1_1 = [[[0,0,0],[1,0,0],[1,1,0],[0,0,1]]]\n    triang_cube_1_2 = [[[0,0,1],[1,0,1],[1,0,0],[1,1,1]]]\n    triang_cube_1_3 = [[[0,0,1],[1,1,1],[1,1,0],[1,0,0]]]\n    triang_cube_1_4 = [[[0,0,0],[1,1,0],[0,1,0],[0,0,1]]]\n    triang_cube_1_5 = [[[0,0,1],[0,1,1],[1,1,0],[1,1,1]]]\n    triang_cube_1_6 = [[[0,0,1],[0,1,1],[0,1,0],[1,1,0]]]\n    triang_cube_1 = triang_cube_1_1 + triang_cube_1_2 + triang_cube_1_3 + triang_cube_1_4 + triang_cube_1_5 + triang_cube_1_6\n    triang = triang_cube_1\n    for h in range(1,h1):\n        move = np.array([0,0,h])\n        triang_moved = []\n        for tetra in triang_cube_1:\n            tetra_moved = []\n            for p in tetra:\n                tetra_moved.append((np.array(p) + move).tolist())\n            triang_moved.append(tetra_moved)\n        triang += triang_moved\n    return triang","pos":43,"type":"cell"}
{"cell_type":"code","exec_count":38,"id":"2ec40f","input":"print pts\nprint np.max(pts, axis=0) + 1","output":{"0":{"name":"stdout","output_type":"stream","text":"[[-2 -2 -1]\n [ 0  0  1]\n [ 0  1  0]\n [ 1  0  0]]\n[2 2 2]\n"}},"pos":50,"type":"cell"}
{"cell_type":"code","exec_count":381,"id":"c5171c","input":"vol_list = []\nfor h1 in range(1,10):\n    series, triang, power = Hilb(cube_stack(h1))\n    vol, sol = solver(series, h1*2)\n    vol_list.append(vol)\n    \nplt.plot(vol_list)","output":{"0":{"name":"stdout","output_type":"stream","text":"2\nreset starting point:  0.782012948506 0.827622934159 0.629362407524\nsolution:  [ 2.00020648  2.00066394  2.00069153]\nguessed vol:  0.2500000603031367\nDone.\n('vol:', 0.2500000603031367, '; sol:', [2.0002064774500408, 2.000663944158221, 2.0006915316719294])\n4\nreset starting point:  0.898615153345 0.96518757518 0.665272492047\nsolution:  [ 1.9995118   1.99971688  4.00043545]\nguessed vol:  0.12500001210719347\nDone.\n('vol:', 0.12500001210719347, '; sol:', [1.9995118047578864, 1.9997168791950102, 4.000435445004489])\n"},"1":{"name":"stdout","output_type":"stream","text":"6\nreset starting point:  0.459338690451 0.871718503097 0.434901349208\nsolution: "},"10":{"name":"stdout","output_type":"stream","text":"16\nreset starting point:  0.776422724464 0.014651125294 0.05047954484\nsolution: "},"11":{"name":"stdout","output_type":"stream","text":" [ 772.77206317    1.99936097    6.03478459]\nguessed vol:  2.7465957544695053e-07\nvolume:  2.7465957544695053e-07  is out of bounds.\nreset starting point:  0.271186307082 0.997648780588 0.304367488233\nsolution: "},"12":{"name":"stdout","output_type":"stream","text":" [ 1.99525918  1.9983638   5.83946134]\nguessed vol:  -0.037518489526878765\nDone.\n('vol:', 0.037518489526878765, '; sol:', [1.995259183289604, 1.9983637970630865, 5.839461336364098])\n"},"13":{"name":"stdout","output_type":"stream","text":"18\nreset starting point:  0.446791319938 0.37058959552 0.182851023751\nsolution: "},"14":{"name":"stdout","output_type":"stream","text":" [ -4.03412890e+04   1.99974959e+00   7.37655252e+00]\nguessed vol:  2.2340348986346493e-10\nvolume:  2.2340348986346493e-10  is out of bounds.\nreset starting point:  0.526387362238 0.747237336595 0.430378850282\nsolution:  [ 2.00164618  1.99950685  5.8779082 ]\nguessed vol:  "},"15":{"name":"stdout","output_type":"stream","text":"-0.0630016659093651\nDone.\n('vol:', 0.0630016659093651, '; sol:', [2.0016461818852123, 1.9995068490327228, 5.877908199335883])\n"},"16":{"data":{"text/plain":"[<matplotlib.lines.Line2D object at 0x7f9cf03fe7d0>]"},"exec_count":381,"output_type":"execute_result"},"17":{"data":{"image/png":"830c092d688d6d22efd32ce57a1c888d2a917787"},"exec_count":381,"output_type":"execute_result"},"2":{"name":"stdout","output_type":"stream","text":" [ 1.99983811  1.99950475  8.00034871]\nguessed vol:  0.06250000419095159\nDone.\n('vol:', 0.06250000419095159, '; sol:', [1.9998381114234558, 1.9995047468808147, 8.000348713289144])\n"},"3":{"name":"stdout","output_type":"stream","text":"8\nreset starting point:  0.28899035347 0.329156437933 0.733900169237\nsolution:  [ 2.00163327  1.99893603  6.2542778 ]\nguessed vol:  0.033610836079510875\nDone.\n('vol:', 0.033610836079510875, '; sol:', [2.0016332703266793, 1.9989360282147566, 6.25427779508921])\n"},"4":{"name":"stdout","output_type":"stream","text":"10\nreset starting point:  0.160389408572 0.801742596346 0.886117484409\n"},"5":{"name":"stdout","output_type":"stream","text":"solution:  [ 1.89610794  1.98937962  5.90191405]\nguessed vol:  0.017551780157082808\nDone.\n('vol:', 0.017551780157082808, '; sol:', [1.8961079431004073, 1.9893796234059813, 5.901914051186669])\n"},"6":{"name":"stdout","output_type":"stream","text":"12\nreset starting point:  0.443280975265 0.864254960237 0.947061891555\nsolution: "},"7":{"name":"stdout","output_type":"stream","text":" [ 1.94947993  1.95168194  5.97093075]\nguessed vol:  -0.0011042868926800509\nDone.\n('vol:', 0.0011042868926800509, '; sol:', [1.9494799286144655, 1.9516819384596051, 5.9709307518623955])\n"},"8":{"name":"stdout","output_type":"stream","text":"14\nreset starting point:  0.290030534333 0.285903817867 0.551037251677\nsolution: "},"9":{"name":"stdout","output_type":"stream","text":" [ 1.97397743  1.98558702  5.89801355]\nguessed vol:  -0.01806844602586797\nDone.\n('vol:', 0.01806844602586797, '; sol:', [1.9739774291891679, 1.9855870237741087, 5.898013554433837])\n"}},"pos":47,"type":"cell"}
{"cell_type":"code","exec_count":382,"id":"32d40c","input":"h1 = 10\nseries, triang, power = Hilb(cube_stack(h1))\nvol, sol = solver(series, h1*2)","output":{"0":{"name":"stdout","output_type":"stream","text":"20\nreset starting point:  0.841568532478 0.207712523924 0.850898791374\n"},"1":{"name":"stdout","output_type":"stream","text":"solution:  [ 2.0012357   1.97311394  5.86940559]\nguessed vol:  -0.09477350852028225\nDone.\n('vol:', 0.09477350852028225, '; sol:', [2.001235703358472, 1.9731139368131199, 5.869405589634946])\n"}},"pos":45,"type":"cell"}
{"cell_type":"code","exec_count":383,"id":"a03708","input":"h1 = 9\nseries, triang, power = Hilb(cube_stack(h1))\nvol, sol = solver(series, h1*2)","output":{"0":{"name":"stdout","output_type":"stream","text":"18\nreset starting point:  0.113785692367 0.224931450099 0.0396208788137\nsolution: "},"1":{"name":"stdout","output_type":"stream","text":" [ 2.00932261  1.99672661  3.16067922]\nguessed vol:  -0.00507541206530846\nDone.\n('vol:', 0.00507541206530846, '; sol:', [2.0093226147662393, 1.996726610369737, 3.16067922180887])\n"}},"pos":44,"type":"cell"}
{"cell_type":"code","exec_count":384,"id":"9af895","input":"import matplotlib.pyplot as plt \nvol_list = []\nfor h1 in range(1,20):\n    series, triang, power = Hilb(cube_stack(h1))\n    vol, sol = solver(series, h1*2)\n    vol_list.append(vol)\n    \nplt.plot(vol_list)","output":{"0":{"name":"stdout","output_type":"stream","text":"2\nreset starting point:  0.108388647791 0.800889983883 0.620117724952\nsolution:  [ 1.9997456   2.00060656  1.99920502]\nguessed vol:  0.2500000667059794\nDone.\n('vol:', 0.2500000667059794, '; sol:', [1.9997455998289497, 2.0006065611372548, 1.9992050165361168])\n4\nreset starting point:  0.45183816592 0.546769767514 0.266504157761\nsolution:  [ 1.99990866  2.00008026  3.99963734]\nguessed vol:  0.1250000037252903\nDone.\n('vol:', 0.1250000037252903, '; sol:', [1.9999086614018025, 2.000080260298802, 3.999637340601439])\n"},"1":{"name":"stdout","output_type":"stream","text":"6\nreset starting point:  0.867105553053 0.897386434325 0.876748639337\nsolution:  [ 2.00026474  2.00004132  7.99876363]\nguessed vol:  0.06250000279396772\nDone.\n('vol:', 0.06250000279396772, '; sol:', [2.000264739203078, 2.0000413220172804, 7.998763625396251])\n"},"10":{"name":"stdout","output_type":"stream","text":"[ 1.40615038  1.9574597   5.90512035]\nguessed vol:  -0.00014194518511989607\nvolume:  0.00014194518511989607  is out of bounds.\nreset starting point:  0.4723722677 0.28647747589 1.59508490372\nsolution:  [ 2.00051576  1.94737879  5.916974  ]\nguessed vol:  -0.0003049392858545108\nvolume:  0.0003049392858545108  is out of bounds.\nreset starting point:  0.693604663278 0.957171585031 -1.21866435063\n"},"11":{"name":"stdout","output_type":"stream","text":"solution:  [  1.99999288e+00   1.99998303e+00  -5.68724390e+09]\nguessed vol:  -9.893415886423697e-19\nvolume:  9.893415886423697e-19  is out of bounds.\nreset starting point:  0.422010155464 0.336686130428 -1.06869768815\nsolution:  [  2.00018302e+00   1.99980250e+00  -4.75566062e+14]\nguessed vol:  -1.4149082440024647e-28\nvolume: "},"12":{"name":"stdout","output_type":"stream","text":" 1.4149082440024647e-28  is out of bounds.\nreset starting point:  0.345792390217 0.568416137687 -1.890998268\n"},"13":{"name":"stdout","output_type":"stream","text":"solution:  [  1.33820304e+05   1.21304909e+05  -9.02619200e+08]\nguessed vol:  -2.3849939330056313e-36\nvolume:  2.3849939330056313e-36  is out of bounds.\nsolution out of bounds.\nreset starting point:  0.90816250034 -0.285723057095 0.835315502121\nsolution:  [ 2.04086862 -3.58359407  5.91176978]"},"14":{"name":"stdout","output_type":"stream","text":"\nguessed vol:  3.353421991704984e-05\nvolume:  3.353421991704984e-05  is out of bounds.\nreset starting point:  0.79089149284 -0.92461729357 0.524946720054\nsolution:  [   2.020896   -186.7768334     5.87413389]\nguessed vol:  -3.694447622401353e-08\nvolume:  3.694447622401353e-08  is out of bounds.\nreset starting point:  0.684068033029 -0.194389856326 0.546683348307\nsolution:  "},"15":{"name":"stdout","output_type":"stream","text":"[-156.08974914 -185.92128786    5.86147842]\nguessed vol:  9.363028967868548e-12\nvolume:  9.363028967868548e-12  is out of bounds.\nreset starting point:  0.950339099233 -0.617047964269 -0.500331792576\nsolution: "},"16":{"name":"stdout","output_type":"stream","text":" [  1.98126884e+00  -6.06235077e+08  -5.20421462e+08]\nguessed vol:  1.2860429122292147e-33\nvolume:  1.2860429122292147e-33  is out of bounds.\nreset starting point:  0.99939271987 -0.949784924235 -0.523366721543\nsolution:  [  2.00000001e+00  -3.83248822e+08  -2.29267440e+08]\nguessed vol:  1.657919474907776e-32\nvolume:  1.657919474907776e-32  is out of bounds.\nreset starting point:  0.878968421382 -0.26179021807 -0.559985217059\nsolution:  [  1.99935937e+00  -8.70692282e+08  -1.65334342e+09]\nguessed vol:  6.176670766996426e-35\nvolume:  6.176670766996426e-35  is out of bounds."},"17":{"name":"stdout","output_type":"stream","text":"\nreset starting point:  0.884194247068 -0.95874159588 1.7541586192\n"},"18":{"name":"stdout","output_type":"stream","text":"solution:  [ -1.84129485e+06  -5.23298475e+06   3.18210211e+01]\nguessed vol:  1.4183748614260077e-26\nvolume:  1.4183748614260077e-26  is out of bounds.\nreset starting point:  0.505195107445 -0.715135369071 1.29792776217\nsolution:  [  1.97915541 -49.48194226   5.96086167]\nguessed vol:  1.4420764886129871e-06\nvolume:  1.4420764886129871e-06  is out of bounds.\nreset starting point:  0.839835795839 -0.859610700156 1.26524392307\n"},"19":{"name":"stdout","output_type":"stream","text":"solution:  [ -96.17330839 -290.63129482    5.97864236]\nguessed vol:  -2.360451228555983e-11\nvolume:  2.360451228555983e-11  is out of bounds.\nreset starting point:  0.820732883244 -0.0687706163426 -1.13258823071\n"},"2":{"name":"stdout","output_type":"stream","text":"8\nreset starting point:  0.374453008797 0.79236987653 0.0318690743974\nsolution:  [ 2.00635241  2.00391557  6.23077823]\nguessed vol:  0.033865147817927266\nDone.\n('vol:', 0.033865147817927266, '; sol:', [2.0063524138904962, 2.0039155694297603, 6.230778227979549])\n"},"20":{"name":"stdout","output_type":"stream","text":"solution:  [-26667647.19602326  -1743763.4905402  -19163935.09815622]\nguessed vol:  -6.4425257416719195e-40\nvolume:  6.4425257416719195e-40  is out of bounds.\nreset starting point:  0.851612689612 -0.474924352051 -1.87219247736\n"},"21":{"name":"stdout","output_type":"stream","text":"solution:  [  1.99996446e+00  -1.92107546e+09  -7.50643507e+09]\nguessed vol:  6.155361031513626e-37\nvolume:  6.155361031513626e-37  is out of bounds.\nreset starting point:  0.298926125786 -0.625792689096 -1.32898499804\n"},"22":{"name":"stdout","output_type":"stream","text":"solution:  [  1.99978927e+00  -3.70353534e+08  -8.62501254e+08]\nguessed vol:  1.2544618893651714e-33\nvolume:  1.2544618893651714e-33  is out of bounds.\nreset starting point:  0.938540044737 1.71686635442 0.330033387847\nsolution:  [ 2.01939871  1.99017357  5.56205318]\nguessed vol:  0.004965840000523247\nDone.\n('vol:', 0.004965840000523247, '; sol:', [2.0193987111059752, 1.990173569633702, 5.56205318367083])\n"},"23":{"name":"stdout","output_type":"stream","text":"14\nreset starting point:  0.977955447602 0.642035766139 0.933479513186\nsolution: "},"24":{"name":"stdout","output_type":"stream","text":" [ 1.99887141  1.99429249  5.90493438]\nguessed vol:  -0.018174315586534436\nDone.\n('vol:', 0.018174315586534436, '; sol:', [1.9988714070923796, 1.9942924871423993, 5.9049343809498405])\n"},"25":{"name":"stdout","output_type":"stream","text":"16\nreset starting point:  0.27940154254 0.607947348763 0.712235384424\nsolution:  [ 1.99716069  2.00055061  5.83834512]\n"},"26":{"name":"stdout","output_type":"stream","text":"guessed vol:  -0.03749963168343083\nDone.\n('vol:', 0.03749963168343083, '; sol:', [1.9971606935993451, 2.0005506054633133, 5.83834512309138])\n"},"27":{"name":"stdout","output_type":"stream","text":"18\nreset starting point:  0.534979133028 0.20463318162 0.0935061758539\nsolution:  [ 1.99807157  2.00078183  5.82610638]\nguessed vol:  -0.06208972365919947\nDone."},"28":{"name":"stdout","output_type":"stream","text":"\n('vol:', 0.06208972365919947, '; sol:', [1.9980715670205196, 2.000781830630568, 5.826106377029007])\n"},"29":{"name":"stdout","output_type":"stream","text":"20\nreset starting point:  0.693354545654 0.0105299790396 0.174976383417\n"},"3":{"name":"stdout","output_type":"stream","text":"10\nreset starting point:  0.490531346099 0.908628944127 0.116804013918\nsolution:  [ 2.00170895  2.01149815  6.03022737]\nguessed vol:  0.015791459420189113\nDone.\n('vol:', 0.015791459420189113, '; sol:', [2.0017089549045886, 2.011498150925628, 6.030227370043092])\n"},"30":{"name":"stdout","output_type":"stream","text":"solution:  [  1.99194109e+03   1.94698211e+00   5.75512388e+00]\nguessed vol:  9.364972360434517e-08\nvolume:  9.364972360434517e-08  is out of bounds.\nreset starting point:  0.592547595003 0.256490565073 0.759914507308\nsolution: "},"31":{"name":"stdout","output_type":"stream","text":" [ 2.00287643  1.9794147   5.78452067]\nguessed vol:  -0.09319808637070087\nDone.\n('vol:', 0.09319808637070087, '; sol:', [2.0028764264649292, 1.9794147000166074, 5.7845206738484265])\n"},"32":{"name":"stdout","output_type":"stream","text":"22\nreset starting point:  0.610032065712 0.243217867676 0.747237876847\n"},"33":{"name":"stdout","output_type":"stream","text":"solution:  [ 2.00184331  1.99900914  5.80553022]\nguessed vol:  -0.13632482486473796\nDone.\n('vol:', 0.13632482486473796, '; sol:', [2.0018433128590534, 1.9990091435585162, 5.805530217065188])\n"},"34":{"name":"stdout","output_type":"stream","text":"24\nreset starting point:  0.693769132604 0.599714987611 0.158103143052\nsolution: "},"35":{"name":"stdout","output_type":"stream","text":" [-627.04394001    2.00065309    5.29500592]\nguessed vol:  1.8727088877807042e-06\nvolume:  1.8727088877807042e-06  is out of bounds.\nreset starting point:  0.0682322722674 0.0930366772215 0.200974110149\nsolution:  [ 1.99986618  2.00062611  5.78706624]\nguessed vol:  -0.19539764296039588\nDone.\n('vol:', 0.19539764296039588, '; sol:', [1.999866183436405, 2.0006261124307625, 5.787066238400402])\n"},"36":{"name":"stdout","output_type":"stream","text":"26\nreset starting point:  0.0372469215271 0.916541731461 0.611088801913\nsolution:  [ 2.00359409  1.99999305  5.7772481 ]\nguessed vol:  "},"37":{"name":"stdout","output_type":"stream","text":"-0.28033570657687323\nDone.\n('vol:', 0.28033570657687323, '; sol:', [2.003594091884494, 1.9999930471799774, 5.777248099131438])\n"},"38":{"name":"stdout","output_type":"stream","text":"28\nreset starting point:  0.832212535896 0.0462489142047 0.420871478601\nsolution: "},"39":{"name":"stdout","output_type":"stream","text":" [ 2.00031882  1.98439338  5.76751075]\nguessed vol:  -0.40523906352736755\nDone.\n('vol:', 0.40523906352736755, '; sol:', [2.000318822721243, 1.9843933776544131, 5.767510751342429])\n"},"4":{"name":"stdout","output_type":"stream","text":"12\nreset starting point:  0.284994866907 0.815223375823 0.60804340199\n"},"40":{"name":"stderr","output_type":"stream","text":"WARNING: Some output was deleted.\n"},"5":{"name":"stdout","output_type":"stream","text":"solution:  [ 1.85528886  2.02488975  5.89179372]\nguessed vol:  6.815142983374045e-05\nvolume:  6.815142983374045e-05  is out of bounds.\nreset starting point:  0.30625867766 0.326474955471 0.421344987222\nsolution: "},"6":{"name":"stdout","output_type":"stream","text":" [ 1.99213519  2.00180757  5.93143111]\nguessed vol:  -0.0005186012301194864\nvolume:  0.0005186012301194864  is out of bounds.\nreset starting point:  0.873395812039 0.452987432386 0.595605017189\nsolution:  [ 1.98942186  1.99226468  5.87112107]\nguessed vol:  0.00037366812641792535\nvolume:  0.00037366812641792535  is out of bounds.\nreset starting point:  0.215674346499 0.0914184003281 -0.0536057416475\nsolution: "},"7":{"name":"stdout","output_type":"stream","text":" [  2.00018318e+00   2.00003405e+00  -5.70504284e+04]\nguessed vol:  -9.820762084705865e-09\nvolume:  9.820762084705865e-09  is out of bounds.\nreset starting point:  0.940587381398 0.304817043424 -0.00235156463751\n"},"8":{"name":"stdout","output_type":"stream","text":"solution:  [ 1.91343471  1.68459697 -0.01428595]\nguessed vol:  -17.999129793911948\nvolume:  17.999129793911948  is out of bounds.\nreset starting point:  0.0687289130566 0.0746067723911 -0.627921256188\nsolution:  [  2.00008633e+00   2.00009131e+00  -4.91397453e+04]\nguessed vol:  -1.3234844773342685e-08\nvolume:  1.3234844773342685e-08  is out of bounds.\nreset starting point:  0.133928887677 0.585438339696 1.64044780548\nsolution: "},"9":{"name":"stdout","output_type":"stream","text":" [ 1.41963441  1.97964698  5.90029637]\nguessed vol:  -6.334716435851817e-05\nvolume:  6.334716435851817e-05  is out of bounds.\nreset starting point:  0.247232061956 0.697381495085 1.50288944735\nsolution:  "}},"pos":46,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"d8ba0f","input":"def prism_plot(prism):\n    count = 0\n    plot = 0\n    for p in prism:\n        poly = Polyhedron(vertices=p)\n        if count == 0:\n            count += 1\n            plot = poly.plot()\n        else:\n            plot += poly.plot()\n    \n#     print(poly_list.vertices())\n    return plot\n","pos":4,"type":"cell"}
{"cell_type":"code","exec_count":40,"id":"a59db9","input":"verts = p.vertices()\npts = np.array(verts)\npts_max = np.amax(pts, axis=0)+1\npts_min = np.amin(pts, axis=0)-1\nprint ('pts_max and pts_min: ', pts_max, pts_min)\n# poly = p\npts_new = []\nfor i in range(pts_min[0], pts_max[0]):\n    for j in range(pts_min[1], pts_max[1]):\n        for k in range(pts_min[2], pts_max[2]):\n#             if p.contains([i,j,k]):\n#                 pts_new.append([i,j,k])\n            latt = [i,j,k]\n            if exist(pts, latt) == 1:\n                continue\n            if contain(poly, latt) == 1:\n                pts_new = np.append(pts_new, np.array(latt).reshape((1,3)), axis = 0)  \npts_new = pts_new.tolist()\nprint pts_new","output":{"0":{"name":"stdout","output_type":"stream","text":"('pts_max and pts_min: ', array([2, 2, 2]), array([-3, -3, -2]))\n[[-2, -2, -1], [-1, -1, 0], [0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0]]\n"}},"pos":51,"type":"cell"}
{"cell_type":"code","exec_count":401,"id":"812966","input":"verts = [[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 1, 2], [1, 0, 0], [1, 1, 0]]\np = Polyhedron(vertices = verts)\nseries, triang, power, vol, sol, num_triang = poly_vol(p)","output":{"0":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 1, 2], [1, 0, 0], [1, 1, 0]]\n"},"1":{"name":"stdout","output_type":"stream","text":"volume bound:  0.333333333333\n5\n5\nreset starting point:  0.436694142588 0.481441322208 0.66924525185\nsolution:  "},"2":{"name":"stdout","output_type":"stream","text":"[ 1.46406563  1.46408355  5.07188878]\nguessed vol:  0.1563078490476073\nDone.\n('vol:', 0.1563078490476073, '; sol:', [1.4640656276935466, 1.464083548393636, 5.071888783562578])\n"}},"pos":38,"type":"cell"}
{"cell_type":"code","exec_count":407,"id":"9ac8dc","input":"import matplotlib.pyplot as plt \nvol_list = []\neuler = []\nvol_dict = {}\nfor h1 in range(1,10):\n    for h2 in range(h1+1):\n        for h3 in range(h2+1):\n            verts = [[1,0,0],[0,0,0],[0,0,h1],[0,1,h2],[1,1,h3]]\n            p = Polyhedron(vertices = verts)\n            series, triang, power, vol, sol, num_triang = poly_vol(p)\n            vol_list.append(vol)\n            euler.append(num_triang)\n            vol_dict[\"%d_%d_%d\"%(h1,h2,h3)] = [vol, sol]\nplt.scatter(euler, vol_list)","output":{"0":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 1, 0]]\n"},"1":{"name":"stdout","output_type":"stream","text":"volume bound:  1.0\n2\n2\nreset starting point:  0.533763805968 0.0685355316723 0.12729611574\nsolution:  [ 1.499995    1.49999568  0.99999942]\nguessed vol:  0.5925925925985212\nDone.\n('vol:', 0.5925925925985212, '; sol:', [1.4999949981835679, 1.499995683357956, 0.9999994161434994])\n[[0, 0, 0], [0, 0, 1], [0, 1, 1], [1, 0, 0], [1, 1, 0]]\n"},"10":{"name":"stdout","output_type":"stream","text":" [  1.00000000e+00   8.29011915e+24   2.00000000e+00]\nguessed vol:  -7.275259001596027e-51\nvolume:  -7.275259001596027e-51  is out of bounds.\nreset starting point:  0.612657911911 0.162855959833 0.0224920468813\nsolution:  [ 1.49999925  1.49999402  2.99999813]\nguessed vol:  0.296296296294019\nDone.\n('vol:', 0.296296296294019, '; sol:', [1.4999992514466345, 1.4999940159460134, 2.9999981306820493])\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 2], [1, 0, 0], [1, 1, 1]]\n"},"11":{"name":"stdout","output_type":"stream","text":"volume bound:  0.5\n3\n3\nreset starting point:  0.45938712126 0.609442383725 0.361990015218\nsolution:  [ 3.          3.          0.39444873]\nguessed vol:  -0.009259259259259264\nvolume:  -0.009259259259259264  is out of bounds.\nreset starting point:  0.802594686459 0.748338177019 0.193946440228\nsolution:  [ 3.          3.          0.39444872]\nguessed vol:  -0.009259259259259259\nvolume:  -0.009259259259259259  is out of bounds.\nreset starting point:  0.752458158441 0.973511719716 0.942552015346\nsolution:  [ 3.          3.          0.39444872]\nguessed vol:  -0.009259259259259259\n"},"12":{"name":"stdout","output_type":"stream","text":"volume:  -0.009259259259259259  is out of bounds.\nreset starting point:  0.592439043394 0.33987624692 -0.341051114515\nsolution:  [ 3.          3.          0.39444872]\nguessed vol:  -0.009259259259259257\nvolume:  -0.009259259259259257  is out of bounds.\nreset starting point:  0.162096458867 0.887845041664 -0.438303518135\nsolution:  [  1.33708997e+38   6.32226314e+38  -2.52292641e+39]\nguessed vol:  -2.740729263905063e-156\nvolume:  -2.740729263905063e-156"},"13":{"name":"stdout","output_type":"stream","text":"  is out of bounds.\nreset starting point:  0.80526602253 0.00459382456528 -0.598020257674\n"},"14":{"name":"stdout","output_type":"stream","text":"solution:  [  2.18464718e+18   6.92843787e+15  -2.34221943e+18]\nguessed vol:  4.3494461159560956e-71\nvolume:  4.3494461159560956e-71  is out of bounds.\nsolution out of bounds.\nreset starting point:  0.0933710722733 0.872733164574 1.82801647787\nsolution:  [ 1.46405194  1.46410906  4.00010868]\nguessed vol:  0.3126156984158115\nDone.\n('vol:', 0.3126156984158115, '; sol:', [1.4640519449601936, 1.4641090591707815, 4.00010867767662])\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 2], [1, 0, 0], [1, 1, 2]]\n"},"15":{"name":"stdout","output_type":"stream","text":"volume bound:  0.5\n3\n3\nreset starting point:  0.637540102621 0.801659102767 0.833333816592\n"},"16":{"name":"stdout","output_type":"stream","text":"solution:  [  9.68101258e+37   1.26616191e+38  -4.27950434e+38]\nguessed vol:  -7.819808950757401e-154\nvolume:  -7.819808950757401e-154  is out of bounds.\nreset starting point:  0.560147326868 0.422937772508 0.158459677568\nsolution:  [  4.49550904e+37   4.60232713e+37  -1.87535943e+38]\nguessed vol:  -2.717597896171591e-152\nvolume:  -2.717597896171591e-152  is out of bounds.\nreset starting point:  0.57831713225 0.162224317508 0.861441299556\nsolution:  [ 1.4999907   1.50000739  5.00001573]\nguessed vol:  0.29629629632108845\nDone.\n('vol:', 0.29629629632108845, '; sol:', [1.4999906979451367, 1.5000073892740808, 5.000015733479815])\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 1, 0], [1, 0, 0], [1, 1, 0]]\n"},"17":{"name":"stdout","output_type":"stream","text":"volume bound:  0.5\n4\n4\nreset starting point:  0.81629592175 0.704213904975 0.156376092493\nsolution:  [ 1.50001534  1.49999789  2.99999008]\nguessed vol:  0.1975308642249729\nDone.\n('vol:', 0.1975308642249729, '; sol:', [1.5000153415047277, 1.4999978891457955, 2.9999900794482977])\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 1, 1], [1, 0, 0], [1, 1, 0]]\n"},"18":{"name":"stdout","output_type":"stream","text":"volume bound:  0.5\n4\n4\nreset starting point:  0.0798291814945 0.306985577059 0.805690106068\nsolution:  "},"19":{"name":"stdout","output_type":"stream","text":"[ 1.46730986  1.46731165  3.57534684]\nguessed vol:  0.2073166325559087\nDone.\n('vol:', 0.2073166325559087, '; sol:', [1.4673098566702343, 1.467311645897448, 3.5753468380346147])\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 1, 1], [1, 0, 0], [1, 1, 1]]\n"},"2":{"name":"stdout","output_type":"stream","text":"volume bound:  1.0\n2\n2\nreset starting point:  0.503552385478 0.460631419456 0.184385044695\nsolution:  [ 1.49999205  1.50000038  1.50001077]\nguessed vol:  0.592592592627625\nDone.\n('vol:', 0.592592592627625, '; sol:', [1.499992046449128, 1.5000003777285935, 1.5000107716967306])\n[[0, 0, 0], [0, 0, 1], [0, 1, 1], [1, 0, 0], [1, 1, 1]]\n"},"20":{"name":"stdout","output_type":"stream","text":"volume bound:  0.5\n4\n4\nreset starting point:  0.886558101357 0.980990031859 0.969052562785\nsolution:  [  3.37730674e+34   3.96431014e+34  -1.75565538e+35]\nguessed vol:  -2.0434621503272482e-139\nvolume: "},"21":{"name":"stdout","output_type":"stream","text":" -2.0434621503272482e-139  is out of bounds.\nreset starting point:  0.329224665321 0.413994775932 0.0878932248908\nsolution:  [  2.40237998e+37   3.28491208e+37  -1.27668909e+38]\nguessed vol:  -6.9356687460776e-151\nvolume:  -6.9356687460776e-151  is out of bounds.\nreset starting point:  0.381753187151 0.154788990482 0.35403849829\nsolution:  [ 1.49999405  1.49997952  4.4999993 ]\nguessed vol:  0.19753086423837335\nDone.\n('vol:', 0.19753086423837335, '; sol:', [1.499994048643332, 1.4999795195438361, 4.499999300824145])\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 1, 2], [1, 0, 0], [1, 1, 0]]\n"},"22":{"name":"stdout","output_type":"stream","text":"volume bound:  0.5\n4\n4\nreset starting point:  0.20475642108 0.862007091052 0.150013332907\nsolution:  [ 0.73235969  7.43214102  0.76327875]\nguessed vol:  -0.029410840074048067\nvolume:  -0.029410840074048067  is out of bounds.\nreset starting point:  0.403692246975 0.200530342982 0.254627767411\nsolution:  [ 1.46731339  1.46733046  4.0227227 ]\n"},"23":{"name":"stdout","output_type":"stream","text":"guessed vol:  0.20731663261497255\nDone.\n('vol:', 0.20731663261497255, '; sol:', [1.467313388629722, 1.4673304643327307, 4.02272269841741])\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 1, 2], [1, 0, 0], [1, 1, 1]]\n"},"24":{"name":"stdout","output_type":"stream","text":"volume bound:  0.5\n4\n4\nreset starting point:  0.729579122001 0.0169052215948 0.504196555974\nsolution: "},"25":{"name":"stdout","output_type":"stream","text":" [ 1.5324808   0.12528456  3.12153652]\nguessed vol:  1.2451385105897137\nvolume:  1.2451385105897137  is out of bounds.\nreset starting point:  0.650225631971 0.331391331765 0.847700353966\nsolution:  [ 1.46731793  1.46730902  5.0426333 ]\nguessed vol:  0.20731663259357447\nDone.\n('vol:', 0.20731663259357447, '; sol:', [1.4673179316130815, 1.4673090183555364, 5.042633304546812])\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 1, 2], [1, 0, 0], [1, 1, 2]]\n"},"26":{"name":"stdout","output_type":"stream","text":"volume bound:  0.5\n4\n4\nreset starting point:  0.523113825397 0.0353956195583 0.571866335101\nsolution: "},"27":{"name":"stdout","output_type":"stream","text":" [ 1.49997233  1.49999941  6.00003279]\nguessed vol:  0.19753086426089794\nDone.\n('vol:', 0.19753086426089794, '; sol:', [1.4999723278180022, 1.4999994140389634, 6.0000327898522])\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 1, 3], [1, 0, 0], [1, 1, 0]]\n"},"28":{"name":"stdout","output_type":"stream","text":"volume bound:  0.5\n4\n4\nreset starting point:  0.551871762195 0.856392477888 0.107854049853\nsolution: "},"29":{"name":"stdout","output_type":"stream","text":" [  9.99996585e-01   7.99592037e+10   3.00003130e+00]\nguessed vol:  -5.2136494170017265e-23\nvolume:  -5.2136494170017265e-23  is out of bounds.\nreset starting point:  0.229929116522 0.894857801889 0.663379750094\nsolution:  [  1.00000109e+00   5.88090280e+07   3.00000408e+00]\nguessed vol:  -9.638085122513337e-17\nvolume:  -9.638085122513337e-17  is out of bounds.\nreset starting point:  0.798424927757 0.730558861882 0.0427658695201\nsolution:  [ 1.49996914  1.50003899  4.50011948]\nguessed vol:  0.1975308644305187\nDone.\n('vol:', 0.1975308644305187, '; sol:', [1.4999691438779603, 1.5000389886215841, 4.500119481342826])\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 1, 3], [1, 0, 0], [1, 1, 1]]\n"},"3":{"name":"stdout","output_type":"stream","text":"volume bound:  1.0\n2\n2\nreset starting point:  0.924372486881 0.0405927591595 0.563116661292\nsolution:  [ 1.49999715  1.49999711  2.4999971 ]\nguessed vol:  0.5925925925985212\nDone.\n('vol:', 0.5925925925985212, '; sol:', [1.4999971544663397, 1.499997113930333, 2.499997100401714])\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [1, 0, 0], [1, 1, 0]]\n"},"30":{"name":"stdout","output_type":"stream","text":"volume bound:  0.5\n4\n4\nreset starting point:  0.161371536006 0.128816726774 0.701899310361\nsolution: "},"31":{"name":"stdout","output_type":"stream","text":" [ 1.46731249  1.46730605  5.49002366]\nguessed vol:  0.20731663258345634\nDone.\n('vol:', 0.20731663258345634, '; sol:', [1.4673124881666133, 1.467306052740701, 5.490023662436527])\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 1, 3], [1, 0, 0], [1, 1, 2]]\n"},"32":{"name":"stdout","output_type":"stream","text":"volume bound:  0.5\n4\n4\nreset starting point:  0.705298127612 0.943953760273 0.369383932978\nsolution:  [ 2.55276293  2.55274779  2.84497904]\nguessed vol:  -0.019865604314759366\nvolume:  -0.019865604314759366  is out of bounds.\nreset starting point:  0.783286607277 0.611213640187 0.134894173244\n"},"33":{"name":"stdout","output_type":"stream","text":"solution:  [  2.19325675e+38   5.16846389e+38  -8.74802992e+38]\nguessed vol:  -2.361971909758022e-155\nvolume:  -2.361971909758022e-155  is out of bounds.\nreset starting point:  0.245366348345 0.486159569975 0.940499644093\nsolution:  [ 2.55276269  2.55274828  2.8449805 ]\nguessed vol:  -0.01986560431498674\nvolume:  -0.01986560431498674  is out of bounds.\nreset starting point:  0.773821339487 0.170073566097 -0.565979172738\nsolution: "},"34":{"name":"stdout","output_type":"stream","text":" [ 2.55275028  2.55276247  2.84502241]\nguessed vol:  -0.019865604314873053\nvolume:  -0.019865604314873053  is out of bounds.\nreset starting point:  0.570424389928 0.00390395043105 -0.310554899914\nsolution:  [ 1345.38181769    51.660699   -8592.61597641]\nguessed vol:  -1.072817322134765e-12\nvolume:  -1.072817322134765e-12  is out of bounds.\nreset starting point:  0.551126095982 0.423752336545 -0.793063881156\nsolution:  [ 1.46731522  1.46729876  6.50994083]\nguessed vol:  0.20731663259994093\nDone.\n('vol:', 0.20731663259994093, '; sol:', [1.4673152206920905, 1.4672987637008117, 6.509940827447292])\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 1, 3], [1, 0, 0], [1, 1, 3]]\n"},"35":{"name":"stdout","output_type":"stream","text":"volume bound:  0.5\n4\n4\nreset starting point:  0.3431264643 0.273871816446 0.874178815499\nsolution:  [ 1.49999457  1.50000895  7.50002432]\nguessed vol:  0.197530864206783\nDone.\n('vol:', 0.197530864206783, '; sol:', [1.4999945734518407, 1.5000089470016187, 7.500024317171902])\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 1, 0], [1, 0, 0], [1, 1, 0]]\n"},"36":{"name":"stdout","output_type":"stream","text":"volume bound:  0.333333333333\n5\n5\nreset starting point:  0.520777483251 0.569086522347 0.629143628385\nsolution:  [ 1.5000059   1.49999934  3.99996358]\nguessed vol:  0.14814814816054422\nDone.\n('vol:', 0.14814814816054422, '; sol:', [1.5000058976712876, 1.4999993440393817, 3.999963583830299])\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 1, 1], [1, 0, 0], [1, 1, 0]]\n"},"37":{"name":"stdout","output_type":"stream","text":"volume bound:  0.333333333333\n5\n5\nreset starting point:  0.418336135905 0.234267034963 0.0936685915116\nsolution: "},"38":{"name":"stdout","output_type":"stream","text":" [ 1.47150306  1.4715189   4.60302125]\nguessed vol:  0.15443680658539227\nDone.\n('vol:', 0.15443680658539227, '; sol:', [1.4715030556985937, 1.471518900513944, 4.603021249996526])\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 1, 1], [1, 0, 0], [1, 1, 1]]\n"},"39":{"name":"stdout","output_type":"stream","text":"volume bound:  0.333333333333\n5\n5\nreset starting point:  0.849397665035 0.228550615094 0.676835460157\nsolution: "},"4":{"name":"stdout","output_type":"stream","text":"volume bound:  0.5\n3\n3\nreset starting point:  0.633683193735 0.781194705368 0.271371259489\nsolution:  [ 1.50001051  1.50002357  1.99998302]\nguessed vol:  0.29629629637202015\nDone.\n('vol:', 0.29629629637202015, '; sol:', [1.500010513704113, 1.5000235668312114, 1.9999830174510929])\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 1], [1, 0, 0], [1, 1, 0]]\n"},"40":{"name":"stdout","output_type":"stream","text":" [ 1.50001079  1.50000036  5.49998024]\nguessed vol:  0.14814814815685898\nDone.\n('vol:', 0.14814814815685898, '; sol:', [1.5000107906708184, 1.5000003614648438, 5.499980241547048])\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 1, 2], [1, 0, 0], [1, 1, 0]]\n"},"41":{"name":"stdout","output_type":"stream","text":"volume bound:  0.333333333333\n5\n5\nreset starting point:  0.465187906804 0.624871912839 0.896018879046\nsolution: "},"42":{"name":"stdout","output_type":"stream","text":" [ 1.46406521  1.46410233  5.07198297]\nguessed vol:  0.15630784915288132\nDone.\n('vol:', 0.15630784915288132, '; sol:', [1.4640652116699635, 1.4641023343958188, 5.071982965904411])\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 1, 2], [1, 0, 0], [1, 1, 1]]\n"},"43":{"name":"stdout","output_type":"stream","text":"volume bound:  0.333333333333\n5\n5\nreset starting point:  0.518503775035 0.872950352669 0.223271497008\nsolution:  [ 2.38551597  2.38552218  0.23574828]\nguessed vol:  -0.027415939355250885\nvolume:  -0.027415939355250885  is out of bounds.\nreset starting point:  0.278509118448 0.355771803395 0.613125679619\nsolution: "},"44":{"name":"stdout","output_type":"stream","text":" [ 1.47154542  1.47153081  6.07448328]\nguessed vol:  0.15443680656608194\nDone.\n('vol:', 0.15443680656608194, '; sol:', [1.471545424463705, 1.4715308074597107, 6.074483278244729])\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 1, 2], [1, 0, 0], [1, 1, 2]]\n"},"45":{"name":"stdout","output_type":"stream","text":"volume bound:  0.333333333333\n5\n5\nreset starting point:  0.113796842334 0.84314084546 0.474259991449\n"},"46":{"name":"stdout","output_type":"stream","text":"solution:  [  1.15023353e+38   4.14336988e+38  -2.16624313e+39]\nguessed vol:  -2.4754619938504026e-155\nvolume:  -2.4754619938504026e-155  is out of bounds.\nreset starting point:  0.311959867075 0.644291604656 0.964639561975\nsolution:  [  2.84430620e+37   3.62248908e+37  -1.62618460e+38]\nguessed vol:  -3.549558986380494e-151\nvolume:  -3.549558986380494e-151  is out of bounds.\nreset starting point:  0.135374272864 0.427745997163 0.393174185828\n"},"47":{"name":"stdout","output_type":"stream","text":"solution:  [  1.83935041e+37   2.95741353e+37  -1.20620786e+38]\nguessed vol:  -1.1264145336896679e-150\nvolume:  -1.1264145336896679e-150  is out of bounds.\nsolution out of bounds.\nreset starting point:  0.734283479263 0.483017924435 -0.272442755659\nsolution: "},"48":{"name":"stdout","output_type":"stream","text":" [  2.01083228e+38   3.14339395e+38  -1.58663444e+39]\nguessed vol:  -4.6818658604903756e-155\nvolume:  -4.6818658604903756e-155  is out of bounds.\nreset starting point:  0.91821393558 0.611869489579 -0.808888037438\nsolution:  [  4.70945212e+38   5.70429548e+38  -3.31487961e+39]\nguessed vol:  -2.6629321721817926e-156\nvolume:  -2.6629321721817926e-156  is out of bounds."},"49":{"name":"stdout","output_type":"stream","text":"\nreset starting point:  0.360644296162 0.989266746408 -0.536069627487\nsolution:  [  1.42015209e+38   2.73283918e+38  -1.42999355e+39]\nguessed vol:  -8.282930254586144e-155\nvolume:  -8.282930254586144e-155  is out of bounds.\nsolution out of bounds.\nreset starting point:  0.240047468959 0.696834570695 1.41259644806\nsolution:  [ 1.49997776  1.49999472  7.00001749]\nguessed vol:  0.1481481481660012\nDone.\n('vol:', 0.1481481481660012, '; sol:', [1.4999777613341623, 1.4999947171185015, 7.000017493005587])\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 1, 3], [1, 0, 0], [1, 1, 0]]\n"},"5":{"name":"stdout","output_type":"stream","text":"volume bound:  0.5\n3\n3\nreset starting point:  0.377107330768 0.165352162382 0.721891393267\nsolution:  [ 1.46409896  1.46409971  2.53589931]\nguessed vol:  0.31261569794151\nDone.\n('vol:', 0.31261569794151, '; sol:', [1.4640989637916986, 1.4640997113793988, 2.535899307672724])\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 1], [1, 0, 0], [1, 1, 1]]\n"},"50":{"name":"stdout","output_type":"stream","text":"volume bound:  0.333333333333\n5\n5\nreset starting point:  0.235980839493 0.22464733978 0.268881852937\nsolution: "},"51":{"name":"stdout","output_type":"stream","text":" [ 1.47155598  1.47149994  5.51080085]\nguessed vol:  0.1544368066606694\nDone.\n('vol:', 0.1544368066606694, '; sol:', [1.4715559772708544, 1.4714999427644107, 5.510800852134967])\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 1, 3], [1, 0, 0], [1, 1, 1]]\n"},"52":{"name":"stdout","output_type":"stream","text":"volume bound:  0.333333333333\n5\n5\nreset starting point:  0.322752283625 0.301354894036 0.473224722483\nsolution:  [ 1.46417352  1.46401852  6.53545713]\nguessed vol:  0.15630785018350934\nDone.\n('vol:', 0.15630785018350934, '; sol:', [1.4641735242290321, 1.4640185190625559, 6.535457134734686])\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 1, 3], [1, 0, 0], [1, 1, 2]]\n"},"53":{"name":"stdout","output_type":"stream","text":"volume bound:  0.333333333333\n5\n5\nreset starting point:  0.162657646417 0.617012495493 0.391799416305\nsolution:  [  1.17270131e+38   2.99967339e+38  -1.76805762e+39]\n"},"54":{"name":"stdout","output_type":"stream","text":"guessed vol:  -3.795391880386204e-155\nvolume:  -3.795391880386204e-155  is out of bounds.\nreset starting point:  0.164286809728 0.572085523025 0.958110050843\nsolution:  [ 2.38550585  2.38551707  2.62126119]\nguessed vol:  -0.027415939355478258\nvolume:  -0.027415939355478258  is out of bounds.\nreset starting point:  0.401899798085 0.968633032905 0.290062307237\nsolution: "},"55":{"more_output":true},"6":{"name":"stdout","output_type":"stream","text":"volume bound:  0.5\n3\n3\nreset starting point:  0.785620476513 0.6825418404 0.243100390821\nsolution: "},"7":{"name":"stdout","output_type":"stream","text":" [  1.48421314e+37   4.42120894e+37  -9.32561503e+37]\nguessed vol:  -5.7657001970159435e-151\nvolume:  -5.7657001970159435e-151  is out of bounds.\nreset starting point:  0.913394384614 0.767255043133 0.470472351947\n"},"8":{"name":"stdout","output_type":"stream","text":"solution:  [  1.07968323e+37   3.49920994e+37  -5.49429147e+37]\nguessed vol:  -3.8825713159232715e-150\nvolume:  -3.8825713159232715e-150  is out of bounds.\nreset starting point:  0.875366152111 0.324965746969 0.870234902602\nsolution:  [ 1.50001199  1.49999695  3.49999602]\nguessed vol:  0.2962962963339417\nDone.\n('vol:', 0.2962962963339417, '; sol:', [1.5000119902441007, 1.499996954003249, 3.499996022982719])\n[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 2], [1, 0, 0], [1, 1, 0]]\n"},"9":{"name":"stdout","output_type":"stream","text":"volume bound:  0.5\n3\n3\nreset starting point:  0.292975766305 0.848664559857 0.810755167402\nsolution:  [  1.00000000e+00   3.64679434e+25   2.00000000e+00]\nguessed vol:  -3.759650375444954e-52\nvolume:  -3.759650375444954e-52  is out of bounds.\nreset starting point:  0.413861734593 0.70855410587 0.561935853739\nsolution: "}},"pos":42,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":408,"id":"a8bcac","input":"plt.scatter(euler, np.reciprocal(vol_list))","output":{"0":{"data":{"text/plain":"<matplotlib.collections.PathCollection object at 0x7f9ced9e16d0>"},"exec_count":408,"output_type":"execute_result"},"1":{"data":{"image/png":"d21aacfaadd17403992d159431539cbca794e72e"},"exec_count":408,"output_type":"execute_result"}},"pos":26,"type":"cell"}
{"cell_type":"code","exec_count":41,"id":"fe7867","input":"series_file = open('series_2.txt', 'w')\ntriang_file = open('triang.txt', 'w')\npower_file = open('power.txt', 'w')\ntriang_file.close()\npower_file.close()\n\ntriang_list = []\npower_list = []\n\nfor data in data_x:\n    h1 = data[0]\n    h2 = data[1]\n    h3 = data[2]\n    prism, series, triang, power = lift_prism(h1, h2, h3)\n    triang = np.squeeze(np.array(triang))\n    power = np.squeeze(np.array(power))\n    triang_list.append(triang)\n    power_list.append(power)\n    series_file.write(\"%s\\n\"%(str(series)))\nseries_file.close()\n\ntriang_list = np.squeeze(np.array(triang_list))\npower_list = np.squeeze(np.array(power_list))\nnp.savetxt('triang.txt', triang_list, fmt='%d')\nnp.savetxt('power.txt', power_list, fmt='%d')","pos":58,"type":"cell"}
{"cell_type":"code","exec_count":411,"id":"ba122e","input":"for i in range(len(euler)):\n    print [euler[i], vol_list[i]]","output":{"0":{"name":"stdout","output_type":"stream","text":"[2, 0.5925925925985212]\n[2, 0.592592592627625]\n[2, 0.5925925925985212]\n[4, 0.29629629637202015]\n[4, 0.31261569794151]\n[4, 0.2962962963339417]\n[4, 0.296296296294019]\n[4, 0.3126156984158115]\n[4, 0.29629629632108845]\n[6, 0.1975308642249729]\n[6, 0.2073166325559087]\n[6, 0.19753086423837335]\n[6, 0.20731663261497255]\n[6, 0.20731663259357447]\n[6, 0.19753086426089794]\n[6, 0.1975308644305187]\n[6, 0.20731663258345634]\n[6, 0.20731663259994093]\n[6, 0.197530864206783]\n[8, 0.14814814816054422]\n[8, 0.15443680658539227]\n[8, 0.14814814815685898]\n[8, 0.15630784915288132]\n[8, 0.15443680656608194]\n[8, 0.1481481481660012]\n[8, 0.1544368066606694]\n[8, 0.15630785018350934]\n[8, 0.15443680655880598]\n[8, 0.1481481481487208]\n[8, 0.1481481481641822]\n[8, 0.15443680656244396]\n[8, 0.1563078489862164]\n[8, 0.15443680655153003]\n[8, 0.14814814815326827]\n[10, 0.11851852849861189]\n[10, 0.12286659388063978]\n[10, 0.11851852713359609]\n[10, 0.12481159327217028]\n[10, 0.12286659406788658]\n[10, 0.11851852491963655]\n[10, 0.1248115932703513]\n[10, 0.12481159325852786]\n[10, 0.12286659387632426]\n[10, 0.11851856814274697]\n[10, 0.12286659404321654]\n[10, 0.12481159333788128]\n[10, 0.12481159326125635]\n[10, 0.12286659389019405]\n[10, 0.11851853140532853]\n[10, 0.11851852928383266]\n[10, 0.12286659394658273]\n[10, 0.12481159325807312]\n[10, 0.12481159435446898]\n[10, 0.12286659389383203]\n[10, 0.11851853783454658]\n[12, 0.09876543211498756]\n[12, 0.10194276018204687]\n[12, 0.09876543211694361]\n[12, 0.10365831631224864]\n[12, 0.10194276013726267]\n[12, 0.09876543211794342]\n[12, 0.10420523265656811]\n[12, 0.1036583163981959]\n[12, 0.10194276010543035]\n[12, 0.09876543215932543]\n[12, 0.10365831638273448]\n[12, 0.1042052327870806]\n[12, 0.10365831634726419]\n[12, 0.10194276020183679]\n[12, 0.09876543212817523]\n[12, 0.1019427601308962]\n[12, 0.10365831660089952]\n[12, 0.10420523285984018]\n[12, 0.10365831633794187]\n[12, 0.10194276013112358]\n[12, 0.09876543210236832]\n[12, 0.0987654321215814]\n[12, 0.10194276014578918]\n[12, 0.10365831634896949]\n[12, 0.10420523265747761]\n[12, 0.10365831629724198]\n[12, 0.014108897846834218]\n[12, 0.09876543225141177]\n[14, 0.08465608472943131]\n[14, 0.08707671096310164]\n[14, 0.0846560847170501]\n[14, 0.08853838898085087]\n[14, 0.08707670994908767]\n[14, 0.08465608471306041]\n[14, 0.08923339989996748]\n[14, 0.0885383889417426]\n[14, 0.08707671105503323]\n[14, 0.08465608476217312]\n[14, 0.0892333999775019]\n[14, 0.0892333998963295]\n[14, 0.08853838895629451]\n[14, 0.08707671000979644]\n[14, 0.08465608511187384]\n[14, 0.08853838894583532]\n[14, 0.08923339990735712]\n[14, 0.08923339995453716]\n[14, 0.08853838929644553]\n[14, 0.08707670996773231]\n[14, 0.08465608467804486]\n[14, 0.08707671023148578]\n[14, 0.08853838896021671]\n[14, 0.08923339990246859]\n[14, -1]\n[14, 0.08853838897402966]\n[14, 0.08707671013428353]\n[14, 0.08465608466190133]\n[14, 0.08465608469123254]\n[14, 0.08707671277807094]\n[14, 0.0885383890168896]\n[14, 0.08923339990042223]\n[14, 0.08923339989814849]\n[14, 0.08853838925628565]\n[14, 0.08707670998455797]\n[14, -1]\n[16, 0.07407407411346867]\n[16, 0.07597851434929336]\n[16, 0.0740740741152065]\n[16, 0.07721840332305874]\n[16, 0.07597851435275516]\n[16, 0.07407407409118605]\n[16, 0.07792425493244082]\n[16, 0.07721840327576501]\n[16, 0.07597851434911718]\n[16, 0.0740740741166519]\n[16, 0.07815392836118917]\n[16, 0.07792425578099937]\n[16, 0.07721840330123086]\n[16, 0.07597851434366021]\n[16, 0.07407407410346423]\n[16, 0.07792425523047086]\n[16, 0.07815392458007864]\n[16, 0.07792425498155353]\n[16, 0.07721840328849794]\n[16, 0.07597851997206817]\n[16, 0.07407407408527433]\n[16, 0.07721840338308539]\n[16, 0.07792425516430512]\n[16, 0.0781539245255658]\n[16, 0.07792425500701938]\n[16, 0.07721840327940299]\n[16, 0.07597851433774849]\n[16, 0.07407407409220923]\n[16, 0.07597851450555027]\n[16, 0.07721840330850682]\n[16, 0.07792425502265132]\n[16, 0.07815392462453019]\n[16, 0.07792425501247635]\n[16, 0.07721840326803431]\n[16, 0.07597851433547476]\n[16, 0.07407407407453093]\n[16, 0.07407407411301392]\n[16, 0.07597851472928596]\n[16, 0.07721840331396379]\n[16, 0.07792425499053479]\n[16, 0.07815392447901104]\n[16, 0.07792425494790223]\n[16, 0.07721840328940743]\n[16, 0.07597851438958969]\n[16, 0.07407407410323685]\n[18, 0.0658436214143876]\n[18, 0.0673806248666985]\n[18, 0.06584362371375913]\n[18, 0.06843743390894019]\n[18, 0.06738062484146212]\n[18, 0.06584362139255973]\n[18, 0.06910554569719096]\n[18, 0.06843743327772245]\n[18, 0.06738062485965202]\n[18, 0.0658436214143876]\n[18, 0.06943001749141331]\n[18, 0.06910554421483539]\n[18, 0.06843743324861862]\n[18, 0.06738062484873808]\n[18, 0.06584362296416657]\n[18, 0.06943001747271182]\n[18, 0.06943001750119038]\n[18, 0.6103016759966005]\n[18, 0.06843743502940924]\n[18, 0.06738062483054819]\n[18, 0.06584362141074962]\n[18, 0.06910554424825932]\n[18, 0.0694300174707223]\n[18, 0.06943001746139998]\n[18, 0.06910554421119741]\n[18, 0.06843743326317053]\n[18, 0.06738062486738272]\n[18, 0.3178750499659643]\n[18, 0.06843743330196617]\n[18, 0.06910554451133066]\n[18, 0.06943001758031642]\n[18, 0.0694300174733371]\n[18, 0.06910554419300752]\n[18, 0.03828122046148023]\n[18, 0.06738062495298891]\n[18, 0.06584362140637268]\n[18, 0.06738062487056595]\n[18, 0.06843743324861862]\n[18, 0.06910554451314965]\n[18, 0.06943001747367816]\n[18, 0.06943001746549271]\n[18, 0.0691055442225661]\n[18, 0.06674482877174313]\n[18, 0.06738062486965646]\n[18, 0.06584362139392397]\n[18, 0.06584362141620659]\n[18, 0.06738062485601404]\n[18, 0.06843743329227436]\n[18, 0.06910554739806685]\n[18, 0.06943001747447397]\n[18, -1]\n[18, 0.06910554422120185]\n[18, 0.0684374332781772]\n[18, 0.06738062487465868]\n[18, 0.06584362139983568]\n"}},"pos":31,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":43,"id":"b63a38","input":"def eq1(x):\n    return 0.84375*x\ndef eq2(x):\n    return 0.795*x\n\ndef eq3(x):\n    return 0.85*x\ndef eq4(x):\n    return 0.79*x\n\nfig = plt.figure(figsize=(18, 18))\nx_range = np.array(range(0, 19))\nplt.plot(x_range, eq1(x_range))\nplt.plot(x_range, eq2(x_range))\nplt.plot(x_range, eq3(x_range))\nplt.plot(x_range, eq4(x_range))\nplt.scatter(euler, np.reciprocal(np.array(vol_list)))\nplt.show()","output":{"0":{"data":{"image/png":"4d7c9273d39896315df988b4d0c6ac6603a8f614"},"exec_count":43,"output_type":"execute_result"}},"pos":33,"type":"cell"}
{"cell_type":"code","exec_count":47,"id":"6aaaae","input":"def lift_prism(h1, h2, h3):\n    # h1 >= h2 >= h3\n    \n    triang = []\n    power = []\n    if h1 == h2 == h3:\n        series = 0\n        euler = 0\n        prism = []\n        # h1 = h2 = h3\n        for h in range(h1):\n            # 0 <= h < h1\n            prism_1 = [[[1,0,0],[0,0,h],[0,0,h+1],[1,1,h3]]]\n            prism_2 = [[[1,1,h3],[0,0,h],[0,0,h+1],[0,1,h2]]]\n            prism += prism_1 + prism_2\n            euler += 2\n            \n            series_1, triang_1, power_1 = Hilb(prism_1)\n            series_2, triang_2, power_2 = Hilb(prism_2)\n            series += series_1 + series_2\n            triang.append(triang_1)\n            triang.append(triang_2)\n            power.append(power_1)\n            power.append(power_2)\n        return prism, series, triang, power, euler\n            \n    if h2 > h3:\n        # h1 >= h2 > h3\n        assert((h1 >= h2) and (h2 > h3))\n        series = 0\n        euler = 0\n        prism = []\n        for h in range(h3):\n            # 0 <= h < h3\n            prism_1 = [[[1,0,0],[0,0,h],[0,0,h+1],[1,1,h3]]]\n            prism_2 = [[[0,1,h2],[0,0,h],[0,0,h+1],[1,1,h3]]]\n            prism += prism_1 + prism_2\n            euler += 2\n            \n            series_1, triang_1, power_1 = Hilb(prism_1)\n            series_2, triang_2, power_2 = Hilb(prism_2)\n            series += series_1 + series_2\n            triang.append(triang_1)\n            triang.append(triang_2)\n            power.append(power_1)\n            power.append(power_2)\n\n        for h in range(h3,h2):\n            # h3 <= h < h2\n            prism_1 = [[[1,0,0],[0,0,h],[0,0,h+1],[1,1,h3]]]\n            prism_2 = [[[0,1,h2],[0,0,h],[0,0,h+1],[1,1,h3]]]\n            prism += prism_1 + prism_2\n            euler += 2\n            \n            series_1, triang_1, power_1 = Hilb(prism_1)\n            series_2, triang_2, power_2 = Hilb(prism_2)\n            series += series_1 + series_2\n            triang.append(triang_1)\n            triang.append(triang_2)\n            power.append(power_1)\n            power.append(power_2)\n\n        if h1 > h2:\n            # h1 > h2 > h3\n            assert(h1 > h2 and h2 > h3)\n            for h in range(h2,h1):\n                # h2 <= h < h1\n                prism_1 = [[[1,0,0],[0,0,h],[0,0,h+1],[1,1,h3]]]\n                prism_2 = [[[0,1,h2],[0,0,h],[0,0,h+1],[1,1,h3]]]\n                prism += prism_1 + prism_2\n                euler += 2\n                \n                series_1, triang_1, power_1 = Hilb(prism_1)\n                series_2, triang_2, power_2 = Hilb(prism_2)\n                series += series_1 + series_2\n                triang.append(triang_1)\n                triang.append(triang_2)\n                power.append(power_1)\n                power.append(power_2)\n        return prism, series, triang, power, euler\n        \n    elif h2 < h3:\n        series = 0\n        euler = 0\n        prism = []\n        if h1 > h3:\n            # h1 > h3 > h2\n            assert(h1 > h3 and h3 > h2)\n            for h in range(h2):\n                # 0 <= h < h2\n                prism_1 = [[[1,0,0],[0,0,h],[0,0,h+1],[0,1,h2]]]\n                prism += prism_1\n                euler += 1\n                \n                series_1, triang_1, power_1 = Hilb(prism_1)\n                series += series_1\n                triang.append(triang_1)\n                power.append(power_1)\n            \n            # Middle prism:\n            prism_1 = [[[1,0,0],[0,1,h2],[0,0,h2],[1,1,h3]]]\n            prism += prism_1\n            euler += 1\n            \n            series_1, triang_1, power_1 = Hilb(prism_1)\n            series += series_1\n            triang.append(triang_1)\n            power.append(power_1)\n            \n            for h in range(h2,h3):\n                # h2 <= h < h3\n                prism_1 = [[[1,0,0],[0,0,h],[0,0,h+1],[1,1,h3]]]\n                prism_2 = [[[0,1,h2],[0,0,h],[0,0,h+1],[1,1,h3]]]\n                prism += prism_1 + prism_2\n                euler += 2\n                \n                series_1, triang_1, power_1 = Hilb(prism_1)\n                series_2, triang_2, power_2 = Hilb(prism_2)\n                series += series_1 + series_2\n                triang.append(triang_1)\n                triang.append(triang_2)\n                power.append(power_1)\n                power.append(power_2)\n            return prism, series, triang, power, euler\n                \n        else:\n            # h1 = h3 > h2\n            assert(h1 == h3 and h3 > h2)\n            for h in range(h2):\n                # 0 <= h < h2\n                prism_1 = [[[1,0,0],[0,0,h],[0,0,h+1],[0,1,h2]]]\n                prism += prism_1\n                euler += 1\n                \n                series_1, triang_1, power_1 = Hilb(prism_1)\n                series += series_1\n                triang.append(triang_1)\n                power.append(power_1)\n                \n            # Middle prism:\n            prism_1 = [[[1,0,0],[0,1,h2],[0,0,h1],[1,1,h3]]]\n            prism += prism_1\n            euler += 1\n            \n            series_1, triang_1, power_1 = Hilb(prism_1)\n            series += series_1\n            triang.append(triang_1)\n            power.append(power_1)\n                \n            for h in range(h2,h1):\n                # h2 <= h < h1\n                prism_1 = [[[1,0,0],[0,0,h],[0,0,h+1],[0,1,h2]]]\n                prism += prism_1\n                euler += 1\n                \n                series_1, triang_1, power_1 = Hilb(prism_1)\n                series += series_1\n                triang.append(triang_1)\n                power.append(power_1)\n            return prism, series, triang, power, euler\n                \n    else:\n        assert(h2 == h3)\n        assert(h1 > h2)\n        # h1 > h2 = h3\n        prism = []\n        series = 0\n        euler = 0\n        for h in range(h2):\n            # 0 <= h < h2\n            prism_1 = [[[1,0,0],[0,0,h],[0,0,h+1],[1,1,h3]]]\n            prism_2 = [[[0,1,h2],[0,0,h],[0,0,h+1],[1,1,h3]]]\n            prism += prism_1 + prism_2\n            euler += 2\n\n            series_1, triang_1, power_1 = Hilb(prism_1)\n            series_2, triang_2, power_2 = Hilb(prism_2)\n            series += series_1 + series_2\n            triang.append(triang_1)\n            triang.append(triang_2)\n            power.append(power_1)\n            power.append(power_2)\n        \n        for h in range(h2,h1):\n            # h2 <= h < h1\n            prism_1 = [[[1,0,0],[0,0,h],[0,0,h+1],[1,1,h3]]]\n            prism_2 = [[[0,1,h2],[0,0,h],[0,0,h+1],[1,1,h3]]]\n            prism += prism_1 + prism_2\n            euler += 2\n\n            series_1, triang_1, power_1 = Hilb(prism_1)\n            series_2, triang_2, power_2 = Hilb(prism_2)\n            series += series_1 + series_2\n            triang.append(triang_1)\n            triang.append(triang_2)\n            power.append(power_1)\n            power.append(power_2)\n        \n    return prism, series, triang, power, euler\n\nprint('Okay.')","output":{"0":{"name":"stdout","output_type":"stream","text":"Okay.\n"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":53,"id":"c4081a","input":"vol_list_2 = generate_vol(10)","output":{"0":{"name":"stdout","output_type":"stream","text":"(1, 0, 0)\nreset starting point:  0.012325327499 0.513273762565 0.180696053892\n"},"1":{"name":"stderr","output_type":"stream","text":"/ext/sage/sage-8.4_1804/local/lib/python2.7/site-packages/scipy/optimize/minpack.py:163: RuntimeWarning: The iteration is not making good progress, as measured by the \n  improvement from the last ten iterations.\n  warnings.warn(msg, RuntimeWarning)\n"},"10":{"name":"stdout","output_type":"stream","text":"reset starting point:  0.659128469312 0.239738245826 0.0897396404201\n"},"11":{"name":"stdout","output_type":"stream","text":"solution:  [ 5.23606798  0.76393202 -3.30056308]\nguessed vol:  -0.12499999999999989\nvolume:  -0.12499999999999989  is out of bounds.\nreset starting point:  0.411214808015 0.633076639965 0.142778174951\nsolution:  [ 2.99998741  3.00000868  0.3944672 ]\nguessed vol:  -0.009259259259351893\nvolume:  -0.009259259259351893  is out of bounds.\nreset starting point:  0.234254678131 0.411473297198 0.626294488379\n"},"12":{"name":"stdout","output_type":"stream","text":"solution:  [ 1.46421453  1.46432308  3.99966831]\nguessed vol:  0.3126157196238637\nDone.\n('vol:', 0.3126157196238637, '; sol:', [1.4642145269648106, 1.4643230821831006, 3.9996683075640576])\n\n(2, 2, 2)\nreset starting point:  0.743268561567 0.153293090994 0.0601382482496\nsolution:  [  4.84355391e+37   1.95280993e+37  -2.72497185e+38]\nguessed vol:  -3.6144948609206877e-152\nvolume:  -3.6144948609206877e-152  is out of bounds.\nreset starting point:  0.836760408213 0.298582096631 0.83536779547\nsolution:  [ 1.4999917   1.50000345  5.00000941]\nguessed vol:  0.2962962963138125\nDone.\n('vol:', 0.2962962963138125, '; sol:', [1.4999916956647525, 1.5000034530117161, 5.000009410200332])\n\n(3, 0, 0)\nreset starting point:  0.78176278135 0.886310557183 0.0247629535934\nsolution: "},"13":{"name":"stdout","output_type":"stream","text":" [ 1.50000563  1.49999444  2.99999995]\nguessed vol:  0.19753086421587795\nDone.\n('vol:', 0.19753086421587795, '; sol:', [1.5000056269017252, 1.4999944370382803, 2.9999999517841016])\n\n(3, 1, 0)\nreset starting point:  0.548283685304 0.781947501131 0.686965043732\nsolution:  [ 1.46730584  1.46730878  3.57535254]\nguessed vol:  0.20731663260085043\nDone.\n('vol:', 0.20731663260085043, '; sol:', [1.467305836364256, 1.4673087845443633, 3.5753525375307458])\n\n(3, 1, 1)\nreset starting point:  0.120126877237 0.784737598903 0.82021297789\nsolution:  [ 1.49999486  1.5000036   4.50000476]\nguessed vol:  0.19753086419950705\nDone.\n('vol:', 0.19753086419950705, '; sol:', [1.4999948583296172, 1.5000035956334465, 4.500004755842745])\n\n(3, 2, 0)\n"},"14":{"name":"stdout","output_type":"stream","text":"reset starting point:  0.378505372772 0.681977980876 0.366141080901\nsolution:  [ 0.73235969  7.43214102  0.76327875]\nguessed vol:  -0.029410840074048063\nvolume:  -0.029410840074048063  is out of bounds.\nreset starting point:  0.351547553916 0.796819487455 0.95614081473\n"},"15":{"name":"stdout","output_type":"stream","text":"solution:  [ 1.46730216  1.4673188   4.02273886]\nguessed vol:  0.20731663260085043\nDone.\n('vol:', 0.20731663260085043, '; sol:', [1.4673021562562425, 1.4673187994868744, 4.022738855625916])\n\n(3, 2, 1)\nreset starting point:  0.783577309186 0.919863805945 0.214648163866\nsolution:  [ 2.55275457  2.55273998  0.29222174]\nguessed vol:  -0.019865604315782548\nvolume:  -0.019865604315782548  is out of bounds.\nreset starting point:  0.920912747724 0.264571227568 0.100290587541\nsolution: "},"16":{"name":"stdout","output_type":"stream","text":" [ 4.16685535  0.79364395 -2.14521327]\nguessed vol:  -0.20988314140743336\nvolume:  -0.20988314140743336  is out of bounds.\nreset starting point:  0.440583338486 0.0322368386068 0.945310722107\nsolution:  [ 1.46732154  1.46730834  5.04264513]\nguessed vol:  0.20731663261358335\nDone.\n('vol:', 0.20731663261358335, '; sol:', [1.4673215442829084, 1.4673083382588938, 5.0426451307546785])\n\n(3, 2, 2)\nreset starting point:  0.976258111703 0.886837060056 0.950816261367\n"},"17":{"name":"stdout","output_type":"stream","text":"solution:  [  4.71974089e+36   8.10317970e+38  -1.71628576e+39]\nguessed vol:  -2.6057669654329714e-154\nvolume:  -2.6057669654329714e-154  is out of bounds.\nreset starting point:  0.138098902846 0.607905182084 0.80747642427\n"},"18":{"name":"stdout","output_type":"stream","text":"solution:  [  6.25771182e+37   1.07364181e+38  -3.16714126e+38]\nguessed vol:  -6.20554353109515e-153\nvolume:  -6.20554353109515e-153  is out of bounds.\nreset starting point:  0.476022821077 0.682370714048 0.79007897734\n"},"19":{"name":"stdout","output_type":"stream","text":"solution:  [  2.32306917e+38   3.70870497e+38  -8.40740333e+38]\nguessed vol:  -8.368372190217645e-155\nvolume:  -8.368372190217645e-155  is out of bounds.\nsolution out of bounds.\nreset starting point:  0.134917277338 0.862578263299 1.7443889175\nsolution: "},"2":{"name":"stdout","output_type":"stream","text":"solution:  [  1.00000000e+00   4.37996904e+22   2.00000000e+00]\nguessed vol:  -5.212642238263105e-46\n"},"20":{"name":"stdout","output_type":"stream","text":" [ 1.49997113  1.49998229  5.99999952]\nguessed vol:  0.19753086428681854\nDone.\n('vol:', 0.19753086428681854, '; sol:', [1.4999711263998698, 1.4999822872179278, 5.999999516803021])\n\n(3, 3, 0)\nreset starting point:  0.0807493146338 0.340984364234 0.0713183927019\nsolution:  "},"21":{"name":"stdout","output_type":"stream","text":"[  1.00000371e+00   6.70124119e+10   3.00005597e+00]\nguessed vol:  -7.422808347459944e-23\nvolume:  -7.422808347459944e-23  is out of bounds.\nreset starting point:  0.458021483473 0.83621901645 0.504261298912\nsolution:  [  9.99987523e-01   6.44425661e+08   3.00014463e+00]\nguessed vol:  -8.026627253924269e-19\nvolume:  -8.026627253924269e-19  is out of bounds.\nreset starting point:  0.634643656556 0.103762952183 0.64745219735\nsolution:  [ 1.50000904  1.49999423  4.49997623]\nguessed vol:  0.19753086421769694\nDone.\n('vol:', 0.19753086421769694, '; sol:', [1.5000090418460845, 1.49999423176838, 4.499976233787343])\n\n(3, 3, 1)\nreset starting point:  0.756946454989 0.454051912874 0.997995595173\nsolution: "},"22":{"name":"stdout","output_type":"stream","text":" [ 1.46729673  1.46730792  5.49005223]\nguessed vol:  0.2073166325862985\nDone.\n('vol:', 0.2073166325862985, '; sol:', [1.4672967335992646, 1.4673079195457892, 5.490052233375065])\n\n(3, 3, 2)\nreset starting point:  0.977898737589 0.148389305354 0.858659898096\nsolution:  [ 1.46730129  1.4673172   6.50999055]\nguessed vol:  0.2073166326044884\nDone.\n('vol:', 0.2073166326044884, '; sol:', [1.4673012873077076, 1.4673172035852382, 6.509990546370267])\n\n(3, 3, 3)\n"},"23":{"name":"stdout","output_type":"stream","text":"reset starting point:  0.598919750084 0.292732378196 0.726893604653\nsolution:  [  1.23161491e+37   1.33443407e+37  -2.07780190e+37]\nguessed vol:  -3.6815220674347957e-149\nvolume:  -3.6815220674347957e-149  is out of bounds.\nreset starting point:  0.491095815604 0.222573254657 0.519576756818\n"},"24":{"name":"stdout","output_type":"stream","text":"solution:  [  1.19713605e+35   7.80335939e+34  -3.08929646e+35]\nguessed vol:  -5.653004752016209e-141\nvolume:  -5.653004752016209e-141  is out of bounds.\nreset starting point:  0.70975868883 0.915762362657 0.154080302807\n"},"25":{"name":"stdout","output_type":"stream","text":"solution:  [  1.54598066e+39   1.68443531e+39  -8.20126771e+39]\nguessed vol:  -1.6302129761725395e-158\nvolume:  -1.6302129761725395e-158  is out of bounds.\nsolution out of bounds.\nreset starting point:  0.45975398287 0.0256851028503 1.94750126241\nsolution:  [  1.57325748e+05   9.99995234e-01   9.00017012e+00]\nguessed vol:  -1.3467427888872416e-11\nvolume:  -1.3467427888872416e-11"},"26":{"name":"stdout","output_type":"stream","text":"  is out of bounds.\nreset starting point:  0.140847262686 0.848476805131 1.4139229554\nsolution:  [  5.02191638e+37   1.44032134e+38  -5.46728084e+38]\nguessed vol:  -9.160160441300981e-154\nvolume:  -9.160160441300981e-154  is out of bounds.\nreset starting point:  0.511390752942 0.878622830054 1.22564845966\nsolution:  [  1.01717748e+38   1.16535485e+38  -4.52537155e+38]\nguessed vol:  -1.1252891194410937e-153"},"27":{"name":"stdout","output_type":"stream","text":"\nvolume:  -1.1252891194410937e-153  is out of bounds.\nsolution out of bounds.\nreset starting point:  0.258160415409 0.127142930698 2.71090668549\nsolution:  [ 1.4999931   1.50001393  7.50007425]\nguessed vol:  0.19753086424498179\nDone.\n('vol:', 0.19753086424498179, '; sol:', [1.4999931026574373, 1.5000139291439463, 7.500074254997263])\n\n(4, 0, 0)\nreset starting point:  0.4517437002 0.477520266851 0.681917386945\nsolution:  [ 1.49999736  1.50000486  3.99999778]\nguessed vol:  0.14814814815599675\nDone.\n('vol:', 0.14814814815599675, '; sol:', [1.499997359642324, 1.5000048637598218, 3.999997776972638])\n\n(4, 1, 0)\n"},"28":{"name":"stdout","output_type":"stream","text":"reset starting point:  0.973707203851 0.313020985577 0.696291728739\nsolution:  [ 1.47152341  1.47153273  4.6029854 ]\nguessed vol:  0.1544368065560775\nDone.\n('vol:', 0.1544368065560775, '; sol:', [1.471523414259503, 1.47153273026541, 4.602985396946108])\n\n(4, 1, 1)\nreset starting point:  0.232178075719 0.398998784157 0.957800074648\nsolution:  "},"29":{"name":"stdout","output_type":"stream","text":"[ 1.4999911   1.49999998  5.5000089 ]\nguessed vol:  0.14814814815326827\nDone.\n('vol:', 0.14814814815326827, '; sol:', [1.4999910956970401, 1.4999999750968123, 5.500008903693452])\n\n(4, 2, 0)\nreset starting point:  0.112084796141 0.479271340188 0.0306510707257\n"},"3":{"name":"stdout","output_type":"stream","text":"volume:  -5.212642238263105e-46  is out of bounds.\nreset starting point:  0.0248775955878 0.993932430338 0.282192120506\nsolution:  [  1.00000000e+00   4.06538781e+21   2.00000000e+00]\nguessed vol:  -6.050566497252016e-44\nvolume:  -6.050566497252016e-44  is out of bounds.\nreset starting point:  0.779786161861"},"30":{"name":"stdout","output_type":"stream","text":"solution:  [ 0.76393202  5.23606798  0.81528171]\nguessed vol:  -0.06249999999999999\nvolume:  -0.06249999999999999  is out of bounds.\nreset starting point:  0.666699337081 0.193484856864 0.688551916675\nsolution:  [ 1.46338741  1.46398719  5.07527241]\nguessed vol:  0.15630791828152724\nDone.\n('vol:', 0.15630791828152724, '; sol:', [1.4633874086586105, 1.4639871889289704, 5.075272406845747])\n\n(4, 2, 1)\n"},"31":{"name":"stdout","output_type":"stream","text":"reset starting point:  0.260672470775 0.324164075946 0.174076710899\n"},"32":{"name":"stdout","output_type":"stream","text":"solution:  [ 2.3855015   2.38551308  0.23573944]\nguessed vol:  -0.0274159393568425\nvolume:  -0.0274159393568425  is out of bounds.\nreset starting point:  0.299358736263 0.990851207572 0.416448788557\nsolution:  [ 2.38552304  2.38550902  0.23572438]\nguessed vol:  -0.027415939356387753\nvolume:  -0.027415939356387753  is out of bounds.\nreset starting point:  0.806702303265 0.398541240981 0.299961428668\nsolution:  [ 3.82011272  0.80760596 -1.75706941]\nguessed vol:  -0.25818396310921554\n"},"33":{"name":"stdout","output_type":"stream","text":"volume:  -0.25818396310921554  is out of bounds.\nreset starting point:  0.254694653662 0.788972583189 1.60791016722\nsolution: "},"34":{"name":"stdout","output_type":"stream","text":" [ 1.47152462  1.47153463  6.07451617]\nguessed vol:  0.15443680655153003\nDone.\n('vol:', 0.15443680655153003, '; sol:', [1.4715246222984464, 1.471534625468732, 6.074516171748058])\n\n(4, 2, 2)\nreset starting point:  0.794903679408 0.443047898742 0.911486799624\nsolution:  [ -8.69515180e+18   1.00000000e+00   1.00000000e+01]\n"},"35":{"name":"stdout","output_type":"stream","text":"guessed vol:  -3.3066305376469275e-39\nvolume:  -3.3066305376469275e-39  is out of bounds.\nreset starting point:  0.888452855179 0.172652183544 0.277407108582\nsolution:  [  2.64937253e+35   6.65193396e+35  -4.12324751e+36]\nguessed vol:  -1.8495711464831483e-144\nvolume:  -1.8495711464831483e-144  is out of bounds.\nreset starting point:  0.14181101445 0.841714636799 0.680826008824\nsolution:  "},"36":{"name":"stdout","output_type":"stream","text":"[  9.55538970e+37   2.34703244e+38  -1.11067083e+39]\nguessed vol:  -2.3219277920106228e-154\nvolume:  -2.3219277920106228e-154  is out of bounds.\nsolution out of bounds.\nreset starting point:  0.662703660667 0.386529806045 1.70843458578\nsolution:  [ 1.49999811  1.50001714  7.00004181]\nguessed vol:  0.14814814817509614\nDone.\n('vol:', 0.14814814817509614, '; sol:', [1.499998108242657, 1.5000171422451578, 7.000041812958207])\n\n(4, 3, 0)\nreset starting point:  0.634708050444 0.470502446242 0.0983511580553\nsolution:  [ 1.47151977  1.47152604  5.51091396]\nguessed vol:  "},"37":{"name":"stdout","output_type":"stream","text":"0.154436806555168\nDone.\n('vol:', 0.154436806555168, '; sol:', [1.4715197699773115, 1.4715260443722764, 5.5109139618572085])\n\n(4, 3, 1)\nreset starting point:  0.515780976671 0.0856505370102 0.567272163946\nsolution:  [ 1.46418493  1.46398197  6.5350593 ]\nguessed vol:  0.1563078537471938\nDone.\n('vol:', 0.1563078537471938, '; sol:', [1.4641849349678535, 1.4639819723225638, 6.5350592971977175])\n\n(4, 3, 2)\nreset starting point:  0.0788316451741 0.601535123241 0.0708311437783\n"},"38":{"name":"stdout","output_type":"stream","text":"solution:  [  3.67208004e+37   2.03601833e+38  -1.33274515e+39]\nguessed vol:  -2.708843484664716e-154\nvolume:  -2.708843484664716e-154  is out of bounds.\nreset starting point:  0.379525902848 0.0639069757881 0.893531334914\n"},"39":{"name":"stdout","output_type":"stream","text":"solution:  [  4.38718853e+38   3.68550393e+37   1.01933157e+39]\nguessed vol:  -9.449734961774891e-155\nvolume:  -9.449734961774891e-155  is out of bounds.\nreset starting point:  0.306370441263 0.504557730682 0.0358549736414\nsolution:  [  8.63426155e+37   1.21937454e+38  -9.09306663e+38]\nguessed vol:  -5.724549538652373e-154\nvolume:  -5.724549538652373e-154  is out of bounds.\nsolution out of bounds.\nreset starting point:  0.812133687449 0.557853950791 1.57963647545\nsolution:  [ 1.47152507  1.47154246  7.54606199]\nguessed vol:  0.15443680656153447\nDone.\n('vol:', 0.15443680656153447, '; sol:', [1.4715250676394107, 1.4715424633192415, 7.546061991264454])\n\n(4, 3, 3)\nreset starting point:  0.941346653673 0.79975185421 0.967633082198\nsolution:  [  3.48163307e+38   4.33425953e+38  -1.91740233e+39]\nguessed vol:  -9.787365490523183e-156\nvolume:  -9.787365490523183e-156  is out of bounds.\nreset starting point:  0.583671404129 0.882645141286 0.779807675651\nsolution: "},"4":{"name":"stdout","output_type":"stream","text":" 0.465822857894 0.892686243982\nsolution:  [ 1.50000281  1.4999948   1.00000061]\nguessed vol:  0.5925925926130731\nDone.\n('vol:', 0.5925925926130731, '; sol:', [1.5000028061474475, 1.499994800132724, 1.0000006078870418])\n\n(1, 1, 0)\nreset starting point:  0.478369836087 0.481199294576 0.633804130653\nsolution:  [ 1.49999719  1.50000733  1.50000383]\nguessed vol:  0.5925925926057971\nDone.\n('vol:', 0.5925925926057971, '; sol:', [1.4999971931215679, 1.5000073273301016, 1.5000038312578723])\n\n(1, 1, 1)\nreset starting point:  0.117034654719 0.52467007859 0.610388835301\nsolution:  [ 1.50000361  1.49999531  2.49999558]\nguessed vol:  0.5925925926130731\nDone.\n('vol:', 0.5925925926130731, '; sol:', [1.5000036085363817, 1.4999953072909329, 2.4999955783266485])\n\n(2, 0, 0)\n"},"40":{"name":"stdout","output_type":"stream","text":" [  2.14635458e+38   2.70276515e+38  -1.22421068e+39]\nguessed vol:  -6.143848035859215e-155\nvolume:  -6.143848035859215e-155  is out of bounds.\nreset starting point:  0.607174374074 0.182557447875 0.743021331208\nsolution:  [ 1.49999764  1.50000262  8.50000772]\nguessed vol:  0.1481481481314404\nDone.\n('vol:', 0.1481481481314404, '; sol:', [1.4999976382878368, 1.5000026171748655, 8.500007724776006])\n\n(4, 4, 0)\nreset starting point:  0.411579558709 0.36410982707 0.94260998293\nsolution:  [ 1.49998104  1.49997394  6.00004908]\nguessed vol:  0.14814814821147593\nDone.\n('vol:', 0.14814814821147593, '; sol:', [1.4999810377706029, 1.4999739427728134, 6.000049082628255])\n\n(4, 4, 1)\n"},"41":{"name":"stdout","output_type":"stream","text":"reset starting point:  0.656363187936 0.701479593991 0.958440929127\n"},"42":{"name":"stdout","output_type":"stream","text":"solution:  [ 1.47152732  1.47153854  6.98244777]\nguessed vol:  0.15443680656608194\nDone.\n('vol:', 0.15443680656608194, '; sol:', [1.4715273208682127, 1.471538536194505, 6.982447771730516])\n\n(4, 4, 2)\nreset starting point:  0.817297037636 0.139021934312 0.673224373979\nsolution:  "},"43":{"name":"stdout","output_type":"stream","text":"[ 1.46394068  1.46379558  7.99948502]\nguessed vol:  0.15630785655230284\nDone.\n('vol:', 0.15630785655230284, '; sol:', [1.4639406833178072, 1.4637955803386138, 7.999485018105467])\n\n(4, 4, 3)\nreset starting point:  0.723912046041 0.0482745637549 0.536948455221\nsolution:  [ 1.47154536  1.47153259  9.01755481]"},"44":{"name":"stdout","output_type":"stream","text":"\nguessed vol:  0.15443680655880598\nDone.\n('vol:', 0.15443680655880598, '; sol:', [1.4715453615229765, 1.4715325931654109, 9.017554808239014])\n\n(4, 4, 4)\nreset starting point:  0.512002595109 0.178641665654 0.176411017466\nsolution:  [  5.67262943e+37   1.24549589e+38  -1.08632965e+39]\nguessed vol:  -3.838773709396992e-154\nvolume:  -3.838773709396992e-154  is out of bounds.\nreset starting point:  0.550571330591 0.902400403967 0.966324643419\n"},"45":{"more_output":true},"5":{"name":"stdout","output_type":"stream","text":"reset starting point:  0.666068076325 0.623990220805 0.729170113664\nsolution:  [ 1.50002087  1.50004913  1.99993035]\nguessed vol:  0.2962962966739724\nDone.\n('vol:', 0.2962962966739724, '; sol:', [1.5000208656463772, 1.5000491335425172, 1.999930354125283])\n\n(2, 1, 0)\nreset starting point:  0.293545754168 0.619804714691 0.00799730897136\n"},"6":{"name":"stderr","output_type":"stream","text":"/ext/sage/sage-8.4_1804/local/lib/python2.7/site-packages/scipy/optimize/minpack.py:163: RuntimeWarning: The number of calls to function has reached maxfev = 800.\n  warnings.warn(msg, RuntimeWarning)\n"},"7":{"name":"stdout","output_type":"stream","text":"solution:  [ -1.55181564e+38   1.02717906e+38   2.30115031e+36]\nguessed vol:  -1.0260252585907441e-151\nvolume:  -1.0260252585907441e-151  is out of bounds.\nreset starting point:  0.395699647222 0.396391480878 0.712821918978\nsolution:  [ 1.46406701  1.46383475  2.53582081]\nguessed vol:  0.3126157112419605\nDone.\n('vol:', 0.3126157112419605, '; sol:', [1.4640670140734433, 1.463834749404041, 2.5358208140916147])\n\n(2, 1, 1)\nreset starting point:  0.346131921127 0.403380686008 0.0602921604372\n"},"8":{"name":"stdout","output_type":"stream","text":"solution:  [  3.15683365e+38   3.91252525e+38  -1.00498318e+39]\nguessed vol:  -3.4495011012099897e-155\nvolume:  -3.4495011012099897e-155  is out of bounds.\nreset starting point:  0.408488005559 0.638177747725 0.575879195109\nsolution: "},"9":{"name":"stdout","output_type":"stream","text":" [  4.13603126e+35   1.70746770e+36  -2.91247415e+36]\nguessed vol:  -6.1965754972785535e-145\nvolume:  -6.1965754972785535e-145  is out of bounds.\nreset starting point:  0.506525009629 0.0371022970742 0.107354337545\nsolution:  [ 1.50001285  1.49998972  3.49998854]\nguessed vol:  0.29629629633927834\nDone.\n('vol:', 0.29629629633927834, '; sol:', [1.5000128526735892, 1.4999897221988756, 3.499988535812815])\n\n(2, 2, 0)\nreset starting point:  0.798551943788 0.989294158977 0.819184440637\nsolution:  [ 1.49999564  1.49998904  3.00002465]\nguessed vol:  0.2962962963647442\nDone.\n('vol:', 0.2962962963647442, '; sol:', [1.4999956427057135, 1.499989036626401, 3.000024651256891])\n\n(2, 2, 1)\n"}},"pos":28,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":58,"id":"3b4890","input":"x = []\ny = []\nfor data in vol_list_2:\n    print data[0], data[1], data[-1]\n    x.append(data[-1])\n    y.append(data[1])\nplt.scatter(x, np.reciprocal(y))","output":{"0":{"name":"stdout","output_type":"stream","text":"[1, 0, 0] 0.5925925926130731 2\n[1, 1, 0] 0.5925925926057971 2\n[1, 1, 1] 0.5925925926130731 2\n[2, 0, 0] 0.2962962966739724 4\n[2, 1, 0] 0.3126157112419605 4\n[2, 1, 1] 0.29629629633927834 4\n[2, 2, 0] 0.2962962963647442 4\n[2, 2, 1] 0.3126157196238637 4\n[2, 2, 2] 0.2962962963138125 4\n[3, 0, 0] 0.19753086421587795 6\n[3, 1, 0] 0.20731663260085043 6\n[3, 1, 1] 0.19753086419950705 6\n[3, 2, 0] 0.20731663260085043 6\n[3, 2, 1] 0.20731663261358335 6\n[3, 2, 2] 0.19753086428681854 6\n[3, 3, 0] 0.19753086421769694 6\n[3, 3, 1] 0.2073166325862985 6\n[3, 3, 2] 0.2073166326044884 6\n[3, 3, 3] 0.19753086424498179 6\n[4, 0, 0] 0.14814814815599675 8\n[4, 1, 0] 0.1544368065560775 8\n[4, 1, 1] 0.14814814815326827 8\n[4, 2, 0] 0.15630791828152724 8\n[4, 2, 1] 0.15443680655153003 8\n[4, 2, 2] 0.14814814817509614 8\n[4, 3, 0] 0.154436806555168 8\n[4, 3, 1] 0.1563078537471938 8\n[4, 3, 2] 0.15443680656153447 8\n[4, 3, 3] 0.1481481481314404 8\n[4, 4, 0] 0.14814814821147593 8\n[4, 4, 1] 0.15443680656608194 8\n[4, 4, 2] 0.15630785655230284 8\n[4, 4, 3] 0.15443680655880598 8\n[4, 4, 4] 0.14814814816827493 8\n[5, 0, 0] 0.1185185346578237 10\n[5, 1, 0] 0.1228665939001985 10\n[5, 1, 1] 0.11851852895733828 10\n[5, 2, 0] 0.12481159337039571 10\n[5, 2, 1] 0.12286659401797806 10\n[5, 2, 2] 0.1185185294598341 10\n[5, 3, 0] 0.12481159329945513 10\n[5, 3, 1] 0.12481159334402037 10\n[5, 3, 2] 0.12286659386973042 10\n[5, 3, 3] 0.1185186768634594 10\n[5, 4, 0] 0.1228665938733684 10\n[5, 4, 1] 0.12481159326034685 10\n[5, 4, 2] 0.1248115932530709 10\n[5, 4, 3] 0.12286659387063992 10\n[5, 4, 4] 0.11851852633191129 10\n[5, 5, 0] 0.11851853132247925 10\n[5, 5, 1] 0.12286659387973486 10\n[5, 5, 2] 0.12481159326125635 10\n[5, 5, 3] 0.12481159341041348 10\n[5, 5, 4] 0.12286659386609244 10\n[5, 5, 5] 0.11851852183463052 10\n[6, 0, 0] 0.09876543213476907 12\n[6, 1, 0] 0.10194276010042813 12\n[6, 1, 1] 0.09876543223060708 12\n[6, 2, 0] 0.10365831712806539 12\n[6, 2, 1] 0.10194276040056138 12\n[6, 2, 2] 0.09876543211612443 12\n[6, 3, 0] 0.10420525312656537 12\n[6, 3, 1] 0.10365831659146352 12\n[6, 3, 2] 0.10194276010952308 12\n[6, 3, 3] 0.09876543212521938 12\n[6, 4, 0] 0.10365831632088884 12\n[6, 4, 1] 0.10420524166852374 12\n[6, 4, 2] 0.10365831630406319 12\n[6, 4, 3] 0.10194276018683013 12\n[6, 4, 4] 0.09876543210702948 12\n[6, 5, 0] 0.10194276020990856 12\n[6, 5, 1] 0.10365831630497269 12\n[6, 5, 2] 0.10420524390257668 12\n[6, 5, 3] 0.10365831714821638 12\n[6, 5, 4] 0.10194276013203307 12\n[6, 5, 5] 0.09876543211248645 12\n[6, 6, 0] 0.09876543213385958 12\n[6, 6, 1] 0.10194276030506444 12\n[6, 6, 2] 0.10365831632589106 12\n[6, 6, 3] 0.10420523444190621 12\n[6, 6, 4] 0.10365831652052293 12\n[6, 6, 5] 0.10194276023048587 12\n[6, 6, 6] 0.09876543212936895 12\n[7, 0, 0] 0.08465608465417063 14\n[7, 1, 0] 0.08707670995534045 14\n[7, 1, 1] 0.08465608466372032 14\n[7, 2, 0] 0.08853838896175148 14\n[7, 2, 1] 0.08707671004231088 14\n[7, 2, 2] 0.08465608468395658 14\n[7, 3, 0] 0.0892333999145194 14\n[7, 3, 1] 0.08853838895447552 14\n[7, 3, 2] 0.08707670999865513 14\n[7, 3, 3] 0.08465608482219977 14\n[7, 4, 0] 0.0892333999472612 14\n[7, 4, 1] 0.08923339990542445 14\n[7, 4, 2] 0.08853838896175148 14\n[7, 4, 3] 0.08707671165279862 14\n[7, 4, 4] 0.08465608474398323 14\n[7, 5, 0] 0.08853838892991917 14\n[7, 5, 1] 0.08923339989814849 14\n[7, 5, 2] 0.0892333999299808 14\n[7, 5, 3] 0.08853838893855936 14\n[7, 5, 4] 0.08707670994954242 14\n[7, 5, 5] 0.08465608472886288 14\n[7, 6, 0] 0.08707671005026896 14\n[7, 6, 1] 0.08853838891354826 14\n[7, 6, 2] 0.08923339990769819 14\n[7, 6, 3] 0.0892333999429411 14\n[7, 6, 4] 0.08853838896655475 14\n[7, 6, 5] 0.08707670997836203 14\n[7, 6, 6] 0.08465608674214309 14\n[7, 7, 0] 0.08465608467122365 14\n[7, 7, 1] 0.0870767099195291 14\n[7, 7, 2] 0.08853838899494804 14\n[7, 7, 3] 0.08923339992907131 14\n[7, 7, 4] 0.08923339990360546 14\n[7, 7, 5] 0.08853838893264765 14\n[7, 7, 6] 0.08707671248171778 14\n[7, 7, 7] 0.08465608467957964 14\n[8, 0, 0] 0.07407407409550615 16\n[8, 1, 0] 0.07597851437992631 16\n[8, 1, 1] 0.07407407410357791 16\n[8, 2, 0] 0.07721840372482802 16\n[8, 2, 1] 0.07597851485888896 16\n[8, 2, 2] 0.07407407418736511 16\n[8, 3, 0] 0.07792425496154465 16\n[8, 3, 1] 0.07721840329395491 16\n[8, 3, 2] 0.07597851436730707 16\n[8, 3, 3] 0.0740740741166519 16\n[8, 4, 0] 0.07815398767706938 16\n[8, 4, 1] 0.07792425545994774 16\n[8, 4, 2] 0.07721840329031693 16\n[8, 4, 3] 0.07597851435366465 16\n[8, 4, 4] 0.07407407408391009 16\n[8, 5, 0] 0.07792425495927091 16\n[8, 5, 1] 0.07815394462170389 16\n[8, 5, 2] 0.07792425494062627 16\n[8, 5, 3] 0.0772184032828136 16\n[8, 5, 4] 0.07597851434638869 16\n[8, 5, 5] 0.0740740741157424 16\n[8, 6, 0] 0.07721840329281804 16\n[8, 6, 1] 0.07792425500701938 16\n[8, 6, 2] 0.07815392386811482 16\n[8, 6, 3] 0.07792425851970108 16\n[8, 6, 4] 0.07721840327781138 16\n[8, 6, 5] 0.0759785143272893 16\n[8, 6, 6] 0.07407407674145361 16\n[8, 7, 0] 0.07597851435616576 16\n[8, 7, 1] 0.0772184033285157 16\n[8, 7, 2] 0.07792425510720591 16\n[8, 7, 3] 0.07815392937300558 16\n[8, 7, 4] 0.07792425495426869 16\n[8, 7, 5] 0.07721840329543284 16\n[8, 7, 6] 0.07597851432342395 16\n[8, 7, 7] 0.07407407424830126 16\n[8, 8, 0] 0.0740740741166519 16\n[8, 8, 1] 0.07597851447007997 16\n[8, 8, 2] 0.07721840332538932 16\n[8, 8, 3] 0.07792425494403687 16\n[8, 8, 4] 0.07815392423344747 16\n[8, 8, 5] 0.0779242549576793 16\n[8, 8, 6] 0.07721840327440077 16\n[8, 8, 7] 0.07597851435275516 16\n[8, 8, 8] 0.07407407412270572 16\n[9, 0, 0] 0.0658436214230278 18\n[9, 1, 0] 0.06738062486488161 18\n[9, 1, 1] 0.06584362140495159 18\n[9, 2, 0] 0.0684374334102813 18\n[9, 2, 1] 0.06738062487465868 18\n[9, 2, 2] 0.06584362141393285 18\n[9, 3, 0] 0.06910554421119741 18\n[9, 3, 1] 0.06843743336503394 18\n[9, 3, 2] 0.06738062519616506 18\n[9, 3, 3] 0.06584362141802558 18\n[9, 4, 0] 0.06943001764739165 18\n[9, 4, 1] 0.06910554419300752 18\n[9, 4, 2] 0.06843743326317053 18\n[9, 4, 3] 0.06738062492149766 18\n[9, 4, 4] 0.06584362140711164 18\n[9, 5, 0] 0.06943001749459654 18\n[9, 5, 1] 0.06943001747822564 18\n[9, 5, 2] 0.06910554430578486 18\n[9, 5, 3] 0.0684374332806783 18\n[9, 5, 4] 0.06738062486465424 18\n[9, 5, 5] 0.06584362141802558 18\n[9, 6, 0] 0.06910554442833927 18\n[9, 6, 1] 0.06943001747413291 18\n[9, 6, 2] 0.06943001750130406 18\n[9, 6, 3] 0.06910554422177029 18\n[9, 6, 4] 0.0684374332876132 18\n[9, 6, 5] 0.06738062486738272 18\n[9, 6, 6] 0.06584362237296659 18\n[9, 7, 0] 0.06843743331808128 18\n[9, 7, 1] 0.06910554420585413 18\n[9, 7, 2] 0.06943001748527422 18\n[9, 7, 3] 0.06943001755462319 18\n[9, 7, 4] 0.06910554435216909 18\n[9, 7, 5] 0.06843743478827946 18\n[9, 7, 6] 0.06738062483714202 18\n[9, 7, 7] 0.06584362142530154 18\n[9, 8, 0] 0.06738062658806143 18\n[9, 8, 1] 0.06843743376514055 18\n[9, 8, 2] 0.06910554419016535 18\n[9, 8, 3] 0.06943001746503796 18\n[9, 8, 4] 0.06943001748089728 18\n[9, 8, 5] 0.0691055442039783 18\n[9, 8, 6] 0.06843743368609978 18\n[9, 8, 7] 0.06738062496744845 18\n[9, 8, 8] 0.06584362140188205 18\n[9, 9, 0] 0.06584362144349143 18\n[9, 9, 1] 0.06738062508424036 18\n[9, 9, 2] 0.06843743327510765 18\n[9, 9, 3] 0.06910554441861905 18\n[9, 9, 4] 0.06943001747140443 18\n[9, 9, 5] 0.06943001751656652 18\n[9, 9, 6] 0.06910554421710913 18\n[9, 9, 7] 0.06843743329426388 18\n[9, 9, 8] 0.06738062485760565 18\n[9, 9, 9] 0.06584362193573412 18\n"},"1":{"data":{"text/plain":"<matplotlib.collections.PathCollection object at 0x7f047aa512d0>"},"exec_count":58,"output_type":"execute_result"},"2":{"data":{"image/png":"4d6cdf8537279d5e6d8e76aabd99ab4e39865fab"},"exec_count":58,"output_type":"execute_result"}},"pos":29,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":59,"id":"c242c9","input":"# numerical solver\nimport scipy.optimize\nimport csv\nfrom scipy.optimize import fsolve\nimport itertools\n\ndef mesh_transform(x_neg, x_pos):\n    x_neg = x_neg[::-1]\n    return [0] + merge_lists(x_neg, x_pos)\n\ndef mesh_transform3D(xv,yv,zv):\n    i_mid = -int(xv[0,0,0])\n    j_mid = -int(yv[0,0,0])\n    k_mid = -int(zv[0,0,0])\n    if i_mid < xv.shape[0]:\n        x_neg = xv[:i_mid,0,0].tolist()\n        x_pos = xv[i_mid+1:,0,0].tolist()\n        xv_new = mesh_transform(x_neg, x_pos)\n        for i in range(xv.shape[0]):\n            xv[i,:,:] = xv_new[i]\n    if j_mid < yv.shape[1]:\n        y_neg = yv[0,:j_mid,0].tolist()\n        y_pos = yv[0,j_mid+1:,0].tolist()\n        yv_new = mesh_transform(y_neg, y_pos)\n        for j in range(yv.shape[1]):\n            yv[:,j,:] = yv_new[j]\n    if k_mid < zv.shape[2]:\n        z_neg = zv[0,0,:i_mid].tolist()\n        z_pos = zv[0,0,i_mid+1:].tolist()\n        zv_new = mesh_transform(z_neg, z_pos)\n        for k in range(zv.shape[2]):\n            zv[:,:,k] = zv_new[k]\n    return xv, yv, zv\n\ndef merge_lists(list1, list2):\n    return [x for x in itertools.chain.from_iterable(itertools.izip_longest(list1,list2)) if x]\n\ndef find_bound(i,j,k, bound):\n    b1_min = bound[0][i]\n    b1_max = b1_min+1\n    b2_min = bound[1][j]\n    b2_max = b2_min+1\n    b3_min = bound[2][k]\n    b3_max = b3_min+1\n    return [[b1_min, b1_max],[b2_min,b2_max],[b3_min,b3_max]]\n\ndef generate_grid(b3_max, b1_max=2, b2_max=2):\n    l1 = np.linspace(0, b1_max, b1_max+1).tolist()\n    l2 = np.linspace(0, b2_max, b2_max+1).tolist()\n    l3 = np.linspace(0, b3_max, b3_max+1).tolist()\n    return [l1,l2,l3]\n\ndef upper_bound(euler):\n    return 0.85*euler\n\ndef lower_bound(euler):\n    return 0.79*euler\n\ndef func(p, *d):\n    f1, f2, f3 = d\n    return (f1(b1 = p[0], b2 = p[1], b3 = p[2]), f2(b1 = p[0], b2 = p[1], b3 = p[2]), f3(b1 = p[0], b2 = p[1], b3 = p[2]))\n\ndef constraint(Series, sol, euler):\n    vol = Series(b1 = sol[0], b2 = sol[1], b3 = sol[2])\n    vol_min = lower_bound(euler)\n    vol_max = upper_bound(euler)\n    if 1.0/vol <= vol_max and 1.0/vol >= vol_min:\n        return 1, vol\n    \n    print 'volume: ', vol, ' is out of bounds.'\n    \n    return 0, -1\n    \ndef NSolve(Series, d, euler, bound=[[0,1],[0,1],[0,1]], MAX_COUNT=3):\n    vol = -1\n    sol = -1\n    const = 0\n    count = 0\n    \n    b1_min = bound[0][0]\n    b1_max = bound[0][1]\n    b2_min = bound[1][0]\n    b2_max = bound[1][1]\n    b3_min = bound[2][0]\n    b3_max = bound[2][1]\n\n    while const == 0:\n        if count >= MAX_COUNT:\n            return vol,sol\n            \n        count += 1\n        d1_0 = np.random.uniform(low=b1_min, high=b1_max)\n        d2_0 = np.random.uniform(low=b2_min, high=b2_max)\n        d3_0 = np.random.uniform(low=b3_min, high=b3_max)\n        print 'reset starting point: ', d1_0, d2_0, d3_0\n\n        try:\n            sol = fsolve(func, x0 = np.array([d1_0, d2_0, d3_0]), args = d)\n            print 'solution: ', sol\n            print 'guessed vol: ', Series(b1 = sol[0], b2 = sol[1], b3 = sol[2])\n        except:\n            continue\n        \n        const, vol = constraint(Series, sol, euler)\n\n    print 'Done.'\n\n    return vol, sol\n\ndef solver(series, h_max, num_triang, euler, sol_max=100):\n    # find derivative\n    d1 = diff(series, b1)\n    d2 = diff(series, b2)\n    d3 = diff(series, b3)\n    d = (d1, d2, d3)\n    \n    # divide solution space into grids\n    bounds = generate_grid(h_max)\n    for i in range(len(bounds[0])):\n        for j in range(len(bounds[1])):\n            for k in range(len(bounds[2])):\n                bound = find_bound(i,j,k, bounds)\n                # try solve\n                vol, sol = NSolve(series, d, euler, bound=bound)\n                if type(sol) == int or type(vol) == int:\n                    # sol = -1 and vol = -1\n                    print ('range ', bound,' does not work')\n                    continue\n                if type(sol) == np.ndarray:\n                    # edge case\n                    sol = sol.tolist()\n                if sol[0] > sol_max or sol[1] > sol_max or sol[2] > sol_max:\n                    print ('solution out of bounds.')\n                    continue\n                if vol_min < vol < 1:\n                    print ('vol:', vol, '; sol:', sol)\n                    return vol, sol\n    print('cannot find solution.')\n    return -1,-1\n\ndef generate_vol(h_max, coeff=1):\n    # Input:\n    #   h_max: the max height of the polytope\n    #   coeff: an empirical factor that determines the search space\n    # Output:\n    # triang_list: data for each polytope of height [h1,h2,h3]\n    #   [h1,h2,h3]: heights\n    #   vol: minimum volume\n    #   sol: solution (i.e. the b's in the hilber series)\n    #   prism: polytope point set\n    #   series: hilbert series\n    #   triang: triangulation of the polytope\n    #   power: order of the t's in the hilbert series\n    triang_list = []\n    for h1 in range(1,h_max):\n        for h2 in range(h1+1):\n            for h3 in range(h2+1):\n                print(h1,h2,h3)\n                prism, series, triang, power, euler = lift_prism(h1,h2,h3)\n                vol, sol = solver(series, h1*coeff, num_triang, euler)\n                triang_list.append([[h1,h2,h3], vol, sol, prism, series, triang, power, num_triang, euler])\n                print('')\n    return triang_list\n    \nprint('Okay.')","output":{"0":{"name":"stdout","output_type":"stream","text":"Okay.\n"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"1d8df1","input":"test_file = open('test_triang.npy', 'r')\nfsz = os.fstat(test_file.fileno()).st_size","output":{"0":{"ename":"IOError","evalue":"Failed to interpret file <open file 'test_triang.npy', mode 'r' at 0x7f8028466db0> as a pickle","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIOError\u001b[0m                                   Traceback (most recent call last)","\u001b[0;32m<ipython-input-6-0457f6c746ca>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mtest_file\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'test_triang.npy'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'r'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mfsz\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfstat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_file\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfileno\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mst_size\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_file\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;32mwhile\u001b[0m \u001b[0mtest_file\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtell\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0mfsz\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvstack\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mout\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_file\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/ext/sage/sage-8.4_1804/local/lib/python2.7/site-packages/numpy/lib/npyio.pyc\u001b[0m in \u001b[0;36mload\u001b[0;34m(file, mmap_mode, allow_pickle, fix_imports, encoding)\u001b[0m\n\u001b[1;32m    427\u001b[0m             \u001b[0;32mexcept\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    428\u001b[0m                 raise IOError(\n\u001b[0;32m--> 429\u001b[0;31m                     \"Failed to interpret file %s as a pickle\" % repr(file))\n\u001b[0m\u001b[1;32m    430\u001b[0m     \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    431\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mown_fid\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mIOError\u001b[0m: Failed to interpret file <open file 'test_triang.npy', mode 'r' at 0x7f8028466db0> as a pickle"]}},"pos":60,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"45a5c5","input":"from sage.geometry.polyhedron.palp_database import PALPreader","pos":14,"type":"cell"}
{"cell_type":"code","exec_count":67,"id":"512e91","input":"latt_poly = lattice_polytope.cross_polytope(3)\nlatt_poly.plot3d().show()","output":{"0":{"data":{"iframe":"78de204cfe07e6ed4024eabca0b8bb32d03716f7"},"exec_count":67,"output_type":"execute_result"}},"pos":19,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"9adb85","input":"import pickle\ndef save_obj(obj, name):\n    data = os.path.expanduser('~/Calabi_Yau/data')\n    with open(data + name + '.pkl', 'wb') as f:\n        pickle.dump(obj, f, pickle.HIGHEST_PROTOCOL)\n\ndef load_obj(name ):\n    data = os.path.expanduser('~/Calabi_Yau/data')\n    with open(data + name + '.pkl', 'rb') as f:\n        return pickle.load(f)\n    \n# save_obj(vol_dict, 'vol_0_10_test')\nvol_dict = load_obj('vol_0_10_test')\nprint 'Done.'","output":{"0":{"name":"stdout","output_type":"stream","text":"Done.\n"}},"pos":39,"type":"cell"}
{"cell_type":"code","exec_count":71,"id":"b70cc1","input":"series, triang, power, vol, sol = lattice_vol(2)","output":{"0":{"name":"stdout","output_type":"stream","text":"-1/((2*b1 - b2 - b3 + 4)*(b1 - b2)*(b1 - 2*b3)*b3) + 1/((2*b1 - b2 - b3 + 4)*(b1 - b2)*b1*b3) - 1/((b1 - b2)*(b1 - 2*b2 + b3 - 4)*(b2 - 2*b3)*b3) + 1/((b1 + b2 - 5*b3 - 4)*(b1 - 2*b3)*(b2 - 2*b3)*b3) + 1/((b1 - b2)*(b1 - 2*b2 + b3 - 4)*b2*b3) - 1/((b1 + b2 + b3 - 4)*b1*b2*b3)\nreset starting point:  0.858946798414 0.599251705145 0.0202183621227\nsolution:  [-0.96198593 -0.96204408  0.02247666]\nguessed vol:  0.16669684805674478\nDone.\n('vol:', 0.16669684805674478, '; sol:', [-0.9619859296050474, -0.9620440827046711, 0.02247666380048766])\n"}},"pos":20,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"71aed8","input":"def poly_vol(p):\n    verts = p.vertices()\n    pts = np.array(verts)\n    pts_max = np.amax(pts, axis=0)+1\n    pts_min = np.amin(pts, axis=0)-1\n    pts_new = []\n    for i in range(pts_min[0], pts_max[0]):\n        for j in range(pts_min[1], pts_max[1]):\n            for k in range(pts_min[2], pts_max[2]):\n                if p.contains([i,j,k]):\n                    pts_new.append([i,j,k])\n    print pts_new\n    poly = PointConfiguration(pts_new)\n    triang_idx = poly.restrict_to_regular_triangulations(True).triangulations_list()\n#     print triang_idx\n    triang_idx = max(triang_idx, key=len)\n    num_triang = len(triang_idx)\n    triang = [[pts_new[idx] for idx in idx_list] for idx_list in triang_idx]\n    print 'volume bound: ', find_vol_bound(triang)\n#     print triang\n    series, triang, power = Hilb(triang)\n    print int(np.amax(pts_max))\n    vol, sol = solver(series, int(np.amax(pts_max)))\n    return series, triang, power, vol, sol, num_triang\n\ndef lattice_vol(n, polygons = PALPreader(3)):\n    p = polygons[n]\n    return poly_vol(p)","output":{"0":{"ename":"NameError","evalue":"name 'PALPreader' is not defined","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-8-e8accc3a027d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     24\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mseries\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtriang\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpower\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvol\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msol\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnum_triang\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     25\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 26\u001b[0;31m \u001b[0;32mdef\u001b[0m \u001b[0mlattice_vol\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpolygons\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mPALPreader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mInteger\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     27\u001b[0m     \u001b[0mp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpolygons\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mn\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     28\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mpoly_vol\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'PALPreader' is not defined"]}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"89a3cf","input":"import matplotlib.pyplot as plt\n\neuler_file = open('euler_data_tmp.txt', 'r')\neuler = []\nvol_list = []\nfor line in euler_file:\n    data = eval(line)\n    euler.append(data[0])\n    vol_list.append(data[1])\n    \nprint len(euler)\nprint len(vol_list)\n\nfig = plt.figure(figsize=(18, 18))\nplt.scatter(euler, np.reciprocal(np.array(vol_list)))\nplt.show()","output":{"0":{"name":"stdout","output_type":"stream","text":"216\n216\n"},"1":{"data":{"image/png":"d64bf68f8f6612ae987370ea1065f75f6a45a03d"},"exec_count":8,"output_type":"execute_result"}},"pos":32,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"fe719b","input":"test_file = open('test_triang.npy', 'w')\ntest_file.close()\nfor i in range(1,10):\n    test_file = open('test_triang.npy', 'a')\n    a1 = np.zeros((i,2))\n    a2 = np.ones((2,i))\n    test_file.close()","output":{"0":{"ename":"NotImplementedError","evalue":"Multiple enlargeable (0-)dimensions are not supported.","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNotImplementedError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-8-3af48218ce8b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0matom\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtables\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mFloat64Atom\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0marray_c\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcreate_earray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mroot\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'data'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0matom\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mInteger\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mROW_SIZE\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0midx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mNUM_COLUMNS\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/ext/sage/sage-8.4_1804/local/lib/python2.7/site-packages/tables/file.pyc\u001b[0m in \u001b[0;36mcreate_earray\u001b[0;34m(self, where, name, atom, shape, title, filters, expectedrows, chunkshape, byteorder, createparents, obj, track_times)\u001b[0m\n\u001b[1;32m   1391\u001b[0m                        \u001b[0mfilters\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfilters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexpectedrows\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mexpectedrows\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1392\u001b[0m                        \u001b[0mchunkshape\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mchunkshape\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbyteorder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mbyteorder\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1393\u001b[0;31m                        track_times=track_times)\n\u001b[0m\u001b[1;32m   1394\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1395\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mobj\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/ext/sage/sage-8.4_1804/local/lib/python2.7/site-packages/tables/earray.pyc\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, parentnode, name, atom, shape, title, filters, expectedrows, chunkshape, byteorder, _log, track_times)\u001b[0m\n\u001b[1;32m    160\u001b[0m         super(EArray, self).__init__(parentnode, name, atom, shape, title,\n\u001b[1;32m    161\u001b[0m                                      \u001b[0mfilters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mchunkshape\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbyteorder\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_log\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 162\u001b[0;31m                                      track_times)\n\u001b[0m\u001b[1;32m    163\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    164\u001b[0m     \u001b[0;31m# Public and private methods\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/ext/sage/sage-8.4_1804/local/lib/python2.7/site-packages/tables/carray.pyc\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, parentnode, name, atom, shape, title, filters, chunkshape, byteorder, _log, track_times)\u001b[0m\n\u001b[1;32m    220\u001b[0m         \u001b[0;31m# The `Array` class is not abstract enough! :(\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    221\u001b[0m         super(Array, self).__init__(parentnode, name, new, filters,\n\u001b[0;32m--> 222\u001b[0;31m                                     byteorder, _log, track_times)\n\u001b[0m\u001b[1;32m    223\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    224\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_g_create\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/ext/sage/sage-8.4_1804/local/lib/python2.7/site-packages/tables/leaf.pyc\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, parentnode, name, new, filters, byteorder, _log, track_times)\u001b[0m\n\u001b[1;32m    288\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    289\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 290\u001b[0;31m         \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mLeaf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparentnode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_log\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    291\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    292\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__len__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/ext/sage/sage-8.4_1804/local/lib/python2.7/site-packages/tables/node.pyc\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, parentnode, name, _log)\u001b[0m\n\u001b[1;32m    264\u001b[0m             \u001b[0;31m#   Create or open the node and get its object ID.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    265\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mnew\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 266\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_v_objectid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_g_create\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    267\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    268\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_v_objectid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_g_open\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/ext/sage/sage-8.4_1804/local/lib/python2.7/site-packages/tables/earray.pyc\u001b[0m in \u001b[0;36m_g_create\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    174\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    175\u001b[0m                 raise NotImplementedError(\n\u001b[0;32m--> 176\u001b[0;31m                     \u001b[0;34m\"Multiple enlargeable (0-)dimensions are not \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    177\u001b[0m                     \"supported.\")\n\u001b[1;32m    178\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNotImplementedError\u001b[0m: Multiple enlargeable (0-)dimensions are not supported."]}},"pos":59,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"1eede0","input":"import matplotlib.pyplot as plt \n\ndef find_euler(p):\n    verts = p.vertices()\n    pts = np.array(verts)\n    pts_max = np.amax(pts, axis=0)+1\n    pts_min = np.amin(pts, axis=0)-1\n    pts_new = []\n    for i in range(pts_min[0], pts_max[0]):\n        for j in range(pts_min[1], pts_max[1]):\n            for k in range(pts_min[2], pts_max[2]):\n                if p.contains([i,j,k]):\n                    pts_new.append([i,j,k])\n    print pts_new\n    poly = PointConfiguration(pts_new)\n    triang_idx = poly.restrict_to_regular_triangulations(True).triangulations_list()\n#     print triang_idx\n    triang_idx = max(triang_idx, key=len)\n    num_triang = len(triang_idx)\n    return num_triang\n\neuler = []\nvol_list = []\nfor h1 in range(1,10):\n    for h2 in range(h1+1):\n        for h3 in range(h2+1):\n            verts = [[1,0,0],[0,0,0],[0,0,h1],[0,1,h2],[1,1,h3]]\n            p = Polyhedron(vertices = verts)\n            num_triang = find_euler(p)\n            euler.append(num_triang)\n            vol_data = vol_dict[\"%d_%d_%d\"%(h1,h2,h3)]\n            vol_dict[\"%d_%d_%d\"%(h1,h2,h3)] = [num_triang] + vol_data\n            \nprint 'Done.'","output":{"0":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 1, 0]]\n"},"1":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 1, 1], [1, 0, 0], [1, 1, 0]]\n"},"10":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 1, 1], [1, 0, 0], [1, 1, 0]]\n"},"100":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 1, 5], [1, 0, 0], [1, 1, 2]]\n"},"101":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 1, 5], [1, 0, 0], [1, 1, 3]]\n"},"102":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 1, 5], [1, 0, 0], [1, 1, 4]]\n"},"103":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 1, 5], [1, 0, 0], [1, 1, 5]]\n"},"104":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 1, 6], [1, 0, 0], [1, 1, 0]]\n"},"105":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 1, 6], [1, 0, 0], [1, 1, 1]]\n"},"106":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 1, 6], [1, 0, 0], [1, 1, 2]]\n"},"107":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 1, 6], [1, 0, 0], [1, 1, 3]]\n"},"108":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 1, 6], [1, 0, 0], [1, 1, 4]]\n"},"109":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 1, 6], [1, 0, 0], [1, 1, 5]]\n"},"11":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 1, 1], [1, 0, 0], [1, 1, 1]]\n"},"110":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 1, 6], [1, 0, 0], [1, 1, 6]]\n"},"111":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 1, 7], [1, 0, 0], [1, 1, 0]]\n"},"112":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 1, 7], [1, 0, 0], [1, 1, 1]]\n"},"113":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 1, 7], [1, 0, 0], [1, 1, 2]]\n"},"114":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 1, 7], [1, 0, 0], [1, 1, 3]]\n"},"115":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 1, 7], [1, 0, 0], [1, 1, 4]]\n"},"116":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 1, 7], [1, 0, 0], [1, 1, 5]]\n"},"117":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 1, 7], [1, 0, 0], [1, 1, 6]]\n"},"118":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 1, 7], [1, 0, 0], [1, 1, 7]]\n"},"119":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 0, 8], [0, 1, 0], [1, 0, 0], [1, 1, 0]]\n"},"12":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 1, 2], [1, 0, 0], [1, 1, 0]]\n"},"120":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 0, 8], [0, 1, 1], [1, 0, 0], [1, 1, 0]]\n"},"121":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 0, 8], [0, 1, 1], [1, 0, 0], [1, 1, 1]]\n"},"122":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 0, 8], [0, 1, 2], [1, 0, 0], [1, 1, 0]]\n"},"123":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 0, 8], [0, 1, 2], [1, 0, 0], [1, 1, 1]]\n"},"124":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 0, 8], [0, 1, 2], [1, 0, 0], [1, 1, 2]]\n"},"125":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 0, 8], [0, 1, 3], [1, 0, 0], [1, 1, 0]]\n"},"126":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 0, 8], [0, 1, 3], [1, 0, 0], [1, 1, 1]]\n"},"127":{"more_output":true},"13":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 1, 2], [1, 0, 0], [1, 1, 1]]\n"},"14":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 1, 2], [1, 0, 0], [1, 1, 2]]\n"},"15":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 1, 3], [1, 0, 0], [1, 1, 0]]\n"},"16":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 1, 3], [1, 0, 0], [1, 1, 1]]\n"},"17":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 1, 3], [1, 0, 0], [1, 1, 2]]\n"},"18":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 1, 3], [1, 0, 0], [1, 1, 3]]\n"},"19":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 1, 0], [1, 0, 0], [1, 1, 0]]\n"},"2":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 1, 1], [1, 0, 0], [1, 1, 1]]\n"},"20":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 1, 1], [1, 0, 0], [1, 1, 0]]\n"},"21":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 1, 1], [1, 0, 0], [1, 1, 1]]\n"},"22":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 1, 2], [1, 0, 0], [1, 1, 0]]\n"},"23":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 1, 2], [1, 0, 0], [1, 1, 1]]\n"},"24":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 1, 2], [1, 0, 0], [1, 1, 2]]\n"},"25":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 1, 3], [1, 0, 0], [1, 1, 0]]\n"},"26":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 1, 3], [1, 0, 0], [1, 1, 1]]\n"},"27":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 1, 3], [1, 0, 0], [1, 1, 2]]\n"},"28":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 1, 3], [1, 0, 0], [1, 1, 3]]\n"},"29":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 1, 4], [1, 0, 0], [1, 1, 0]]\n"},"3":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [1, 0, 0], [1, 1, 0]]\n"},"30":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 1, 4], [1, 0, 0], [1, 1, 1]]\n"},"31":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 1, 4], [1, 0, 0], [1, 1, 2]]\n"},"32":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 1, 4], [1, 0, 0], [1, 1, 3]]\n"},"33":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 1, 4], [1, 0, 0], [1, 1, 4]]\n"},"34":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 1, 0], [1, 0, 0], [1, 1, 0]]\n"},"35":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 1, 1], [1, 0, 0], [1, 1, 0]]\n"},"36":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 1, 1], [1, 0, 0], [1, 1, 1]]\n"},"37":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 1, 2], [1, 0, 0], [1, 1, 0]]\n"},"38":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 1, 2], [1, 0, 0], [1, 1, 1]]\n"},"39":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 1, 2], [1, 0, 0], [1, 1, 2]]\n"},"4":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 1], [1, 0, 0], [1, 1, 0]]\n"},"40":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 1, 3], [1, 0, 0], [1, 1, 0]]\n"},"41":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 1, 3], [1, 0, 0], [1, 1, 1]]\n"},"42":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 1, 3], [1, 0, 0], [1, 1, 2]]\n"},"43":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 1, 3], [1, 0, 0], [1, 1, 3]]\n"},"44":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 1, 4], [1, 0, 0], [1, 1, 0]]\n"},"45":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 1, 4], [1, 0, 0], [1, 1, 1]]\n"},"46":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 1, 4], [1, 0, 0], [1, 1, 2]]\n"},"47":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 1, 4], [1, 0, 0], [1, 1, 3]]\n"},"48":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 1, 4], [1, 0, 0], [1, 1, 4]]\n"},"49":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 1, 5], [1, 0, 0], [1, 1, 0]]\n"},"5":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 1], [1, 0, 0], [1, 1, 1]]\n"},"50":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 1, 5], [1, 0, 0], [1, 1, 1]]\n"},"51":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 1, 5], [1, 0, 0], [1, 1, 2]]\n"},"52":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 1, 5], [1, 0, 0], [1, 1, 3]]\n"},"53":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 1, 5], [1, 0, 0], [1, 1, 4]]\n"},"54":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 1, 5], [1, 0, 0], [1, 1, 5]]\n"},"55":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 1, 0], [1, 0, 0], [1, 1, 0]]\n"},"56":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 1, 1], [1, 0, 0], [1, 1, 0]]\n"},"57":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 1, 1], [1, 0, 0], [1, 1, 1]]\n"},"58":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 1, 2], [1, 0, 0], [1, 1, 0]]\n"},"59":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 1, 2], [1, 0, 0], [1, 1, 1]]\n"},"6":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 2], [1, 0, 0], [1, 1, 0]]\n"},"60":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 1, 2], [1, 0, 0], [1, 1, 2]]\n"},"61":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 1, 3], [1, 0, 0], [1, 1, 0]]\n"},"62":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 1, 3], [1, 0, 0], [1, 1, 1]]\n"},"63":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 1, 3], [1, 0, 0], [1, 1, 2]]\n"},"64":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 1, 3], [1, 0, 0], [1, 1, 3]]\n"},"65":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 1, 4], [1, 0, 0], [1, 1, 0]]\n"},"66":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 1, 4], [1, 0, 0], [1, 1, 1]]\n"},"67":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 1, 4], [1, 0, 0], [1, 1, 2]]\n"},"68":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 1, 4], [1, 0, 0], [1, 1, 3]]\n"},"69":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 1, 4], [1, 0, 0], [1, 1, 4]]\n"},"7":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 2], [1, 0, 0], [1, 1, 1]]\n"},"70":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 1, 5], [1, 0, 0], [1, 1, 0]]\n"},"71":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 1, 5], [1, 0, 0], [1, 1, 1]]\n"},"72":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 1, 5], [1, 0, 0], [1, 1, 2]]\n"},"73":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 1, 5], [1, 0, 0], [1, 1, 3]]\n"},"74":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 1, 5], [1, 0, 0], [1, 1, 4]]\n"},"75":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 1, 5], [1, 0, 0], [1, 1, 5]]\n"},"76":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 1, 6], [1, 0, 0], [1, 1, 0]]\n"},"77":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 1, 6], [1, 0, 0], [1, 1, 1]]\n"},"78":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 1, 6], [1, 0, 0], [1, 1, 2]]\n"},"79":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 1, 6], [1, 0, 0], [1, 1, 3]]\n"},"8":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 2], [1, 0, 0], [1, 1, 2]]\n"},"80":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 1, 6], [1, 0, 0], [1, 1, 4]]\n"},"81":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 1, 6], [1, 0, 0], [1, 1, 5]]\n"},"82":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 1, 6], [1, 0, 0], [1, 1, 6]]\n"},"83":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 1, 0], [1, 0, 0], [1, 1, 0]]\n"},"84":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 1, 1], [1, 0, 0], [1, 1, 0]]\n"},"85":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 1, 1], [1, 0, 0], [1, 1, 1]]\n"},"86":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 1, 2], [1, 0, 0], [1, 1, 0]]\n"},"87":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 1, 2], [1, 0, 0], [1, 1, 1]]\n"},"88":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 1, 2], [1, 0, 0], [1, 1, 2]]\n"},"89":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 1, 3], [1, 0, 0], [1, 1, 0]]\n"},"9":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 1, 0], [1, 0, 0], [1, 1, 0]]\n"},"90":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 1, 3], [1, 0, 0], [1, 1, 1]]\n"},"91":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 1, 3], [1, 0, 0], [1, 1, 2]]\n"},"92":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 1, 3], [1, 0, 0], [1, 1, 3]]\n"},"93":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 1, 4], [1, 0, 0], [1, 1, 0]]\n"},"94":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 1, 4], [1, 0, 0], [1, 1, 1]]\n"},"95":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 1, 4], [1, 0, 0], [1, 1, 2]]\n"},"96":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 1, 4], [1, 0, 0], [1, 1, 3]]\n"},"97":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 1, 4], [1, 0, 0], [1, 1, 4]]\n"},"98":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 1, 5], [1, 0, 0], [1, 1, 0]]\n"},"99":{"name":"stdout","output_type":"stream","text":"[[0, 0, 0], [0, 0, 1], [0, 0, 2], [0, 0, 3], [0, 0, 4], [0, 0, 5], [0, 0, 6], [0, 0, 7], [0, 1, 5], [1, 0, 0], [1, 1, 1]]\n"}},"pos":40,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"8f31b9","input":"polygons = PALPreader(3)","pos":15,"type":"cell"}
{"last_load":1547417879673,"type":"file"}